
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace theta_pl_z0xy_a0y_corr_threeclass_pl_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 298> locations_array__ = 
{" (found before start of program)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 34, column 4 to column 58)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 36, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 37, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 38, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 40, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 41, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 42, column 4 to column 31)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 43, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 45, column 4 to column 87)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 46, column 4 to column 48)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 47, column 4 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 48, column 4 to column 48)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 50, column 4 to column 64)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 51, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 52, column 4 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 53, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 56, column 4 to column 35)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 57, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 60, column 4 to column 35)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 61, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 64, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 65, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 68, column 4 to column 35)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 69, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 72, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 73, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 80, column 4 to column 99)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 84, column 4 to column 99)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 88, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 91, column 4 to column 50)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 95, column 4 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 98, column 4 to column 49)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 102, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 105, column 4 to column 50)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 109, column 4 to column 95)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 110, column 4 to column 89)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 111, column 4 to column 85)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 112, column 4 to column 89)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 114, column 4 to column 65)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 115, column 4 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 116, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 117, column 4 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 126, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 127, column 4 to column 104)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 129, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 130, column 4 to column 104)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 132, column 4 to column 33)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 133, column 4 to column 108)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 135, column 4 to column 33)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 136, column 4 to column 108)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 138, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 139, column 4 to column 104)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 81, column 4 to column 26)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 82, column 4 to column 50)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 85, column 4 to column 23)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 86, column 4 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 89, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 90, column 4 to column 34)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 92, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 93, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 96, column 4 to column 33)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 97, column 4 to column 33)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 99, column 4 to column 29)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 100, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 103, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 104, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 106, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 107, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 119, column 8 to column 77)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 120, column 8 to column 102)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 121, column 8 to column 97)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 122, column 8 to column 102)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 118, column 25 to line 123, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 118, column 4 to line 123, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 248, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 249, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 251, column 4 to column 75)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 252, column 4 to column 54)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 253, column 4 to column 54)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 254, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 256, column 4 to column 94)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 257, column 4 to column 57)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 258, column 4 to column 54)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 259, column 4 to column 57)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 261, column 4 to column 133)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 262, column 4 to column 96)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 263, column 4 to column 96)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 264, column 4 to column 93)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 266, column 4 to column 56)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 267, column 4 to column 68)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 269, column 4 to column 23)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 272, column 8 to column 77)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 273, column 8 to column 92)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 274, column 8 to column 92)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 275, column 8 to column 89)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 277, column 8 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 278, column 34 to column 40)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 278, column 8 to column 113)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 280, column 15 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 280, column 8 to column 137)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 281, column 8 to column 85)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 282, column 8 to column 85)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 283, column 8 to column 88)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 284, column 8 to column 88)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 285, column 8 to column 86)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 287, column 8 to column 106)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 288, column 8 to column 106)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 289, column 8 to column 104)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 290, column 8 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 291, column 8 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 292, column 8 to column 72)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 294, column 8 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 295, column 8 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 296, column 8 to column 72)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 297, column 8 to column 76)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 298, column 8 to column 76)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 299, column 8 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 302, column 12 to column 45)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 303, column 19 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 303, column 12 to column 184)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 305, column 12 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 306, column 12 to column 136)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 307, column 12 to column 163)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 308, column 12 to column 65)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 310, column 12 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 311, column 12 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 312, column 12 to column 31)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 314, column 16 to column 196)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 315, column 16 to column 196)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 316, column 16 to column 187)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 319, column 16 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 313, column 29 to line 320, column 13)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 313, column 12 to line 320, column 13)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 321, column 12 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 322, column 12 to column 63)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 323, column 12 to column 64)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 324, column 12 to column 64)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 326, column 12 to column 73)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 327, column 12 to column 58)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 329, column 12 to column 28)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 301, column 28 to line 330, column 9)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 301, column 8 to line 330, column 9)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 331, column 8 to column 24)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 271, column 27 to line 332, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 271, column 4 to line 332, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 145, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 146, column 4 to column 64)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 147, column 4 to column 60)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 148, column 4 to column 63)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 150, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 151, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 152, column 4 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 153, column 4 to column 40)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 154, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 155, column 4 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 157, column 4 to column 31)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 158, column 4 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 159, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 160, column 4 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 162, column 4 to column 31)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 163, column 4 to column 35)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 164, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 165, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 167, column 4 to column 41)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 168, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 169, column 4 to column 39)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 170, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 172, column 4 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 173, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 174, column 4 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 175, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 176, column 4 to column 41)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 177, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 179, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 180, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 183, column 8 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 185, column 15 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 185, column 8 to column 127)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 186, column 8 to column 69)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 187, column 8 to column 69)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 188, column 8 to column 72)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 189, column 8 to column 72)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 190, column 8 to column 70)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 192, column 8 to column 39)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 193, column 8 to column 43)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 194, column 8 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 195, column 8 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 198, column 8 to column 82)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 199, column 8 to column 82)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 200, column 8 to column 79)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 201, column 8 to column 58)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 202, column 8 to column 58)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 203, column 8 to column 56)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 205, column 8 to column 55)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 206, column 8 to column 58)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 207, column 8 to column 57)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 208, column 8 to column 60)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 209, column 8 to column 57)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 210, column 8 to column 60)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 212, column 26 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 212, column 8 to column 90)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 215, column 12 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 216, column 19 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 216, column 12 to column 174)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 218, column 12 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 219, column 12 to column 113)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 220, column 12 to column 139)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 221, column 12 to column 57)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 223, column 12 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 224, column 12 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 225, column 12 to column 31)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 227, column 16 to column 157)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 228, column 16 to column 162)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 229, column 16 to column 162)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 231, column 16 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 226, column 29 to line 232, column 13)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 226, column 12 to line 232, column 13)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 234, column 12 to column 28)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 235, column 12 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 236, column 12 to column 48)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 237, column 12 to column 48)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 238, column 12 to column 41)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 214, column 28 to line 239, column 9)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 214, column 8 to line 239, column 9)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 242, column 8 to column 24)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 182, column 25 to line 243, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 182, column 4 to line 243, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 244, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 11, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 12, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 14, column 4 to column 25)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 15, column 4 to column 25)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 16, column 4 to column 25)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 17, column 35 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 17, column 4 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 18, column 40 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 18, column 4 to column 50)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 19, column 20 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 19, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 20, column 11 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 20, column 4 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 21, column 11 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 21, column 4 to column 70)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 23, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 24, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 25, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 26, column 37 to column 46)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 26, column 4 to column 48)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 27, column 42 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 27, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 28, column 20 to column 29)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 28, column 4 to column 41)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 29, column 11 to column 46)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 29, column 4 to column 78)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 30, column 11 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 30, column 4 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 34, column 25 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 40, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 45, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 45, column 44 to column 71)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 46, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 47, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 48, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 50, column 20 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 57, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 61, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 65, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 69, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 73, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 80, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 84, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 109, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 114, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 114, column 26 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 115, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 116, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 117, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 127, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 130, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 133, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 136, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 139, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 251, column 10 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 251, column 28 to column 55)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 252, column 10 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 253, column 10 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 254, column 10 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 256, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 256, column 39 to column 66)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 261, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 261, column 39 to column 66)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 266, column 11 to column 20)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 267, column 11 to column 20)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 3, column 8 to column 76)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 2, column 54 to line 4, column 3)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 6, column 8 to column 78)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_theta_rnix_onlyt_2024/stan_files/theta-pl_z0xy_a0y-corr-threeclass-pl.stan', line 5, column 88 to line 7, column 3)"};

struct g_pl_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
  operator()(const T0__& x, const T1__& theta_pl, const T2__& cutoff,
             std::ostream* pstream__) const;
};
struct log_g_pl_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__, T4__>, -1, 1>
  operator()(const T0__& x, const T1__& theta, const T2__& cutoff,
             const T3__& log_theta, const T4__& log_cutoff,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
  g_pl(const T0__& x_arg__, const T1__& theta_pl, const T2__& cutoff,
       std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>;
    int current_statement__ = 0; 
    const auto& x = stan::math::to_ref(x_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 294;
      return stan::math::multiply((theta_pl / cutoff),
               stan::math::pow(
                 stan::math::divide(cutoff, stan::math::add(x, cutoff)),
                 (1 + theta_pl)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__, T4__>, -1, 1>
  log_g_pl(const T0__& x_arg__, const T1__& theta, const T2__& cutoff,
           const T3__& log_theta, const T4__& log_cutoff,
           std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
                                 T4__>;
    int current_statement__ = 0; 
    const auto& x = stan::math::to_ref(x_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 296;
      return stan::math::subtract((log_theta + (theta * log_cutoff)),
               stan::math::multiply((1 + theta),
                 stan::math::log(stan::math::add(x, cutoff))));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
g_pl_functor__::operator()(const T0__& x, const T1__& theta_pl,
                           const T2__& cutoff, std::ostream* pstream__) 
const
{
  return g_pl(x, theta_pl, cutoff, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__, T4__>, -1, 1>
log_g_pl_functor__::operator()(const T0__& x, const T1__& theta,
                               const T2__& cutoff, const T3__& log_theta,
                               const T4__& log_cutoff,
                               std::ostream* pstream__)  const
{
  return log_g_pl(x, theta, cutoff, log_theta, log_cutoff, pstream__);
}


class theta_pl_z0xy_a0y_corr_threeclass_pl_model final : public model_base_crtp<theta_pl_z0xy_a0y_corr_threeclass_pl_model> {

 private:
  int N_cascadelevel_features;
  int N_videolevel_features;
  int V_train;
  int C_train;
  int E_train;
  std::vector<int> N_cascades_per_video_train;
  std::vector<int> N_cascadesize_per_cascade_train;
  Eigen::Matrix<double, -1, 1> d_train_data__;
  Eigen::Matrix<double, -1, 1> cascadelevel_features_train_data__;
  Eigen::Matrix<double, -1, 1> videolevel_features_train_data__;
  int V_holdout;
  int C_holdout;
  int E_holdout;
  std::vector<int> N_cascades_per_video_holdout;
  std::vector<int> N_cascadesize_per_cascade_holdout;
  Eigen::Matrix<double, -1, 1> d_holdout_data__;
  Eigen::Matrix<double, -1, 1> cascadelevel_features_holdout_data__;
  Eigen::Matrix<double, -1, 1> videolevel_features_holdout_data__;
  int L_z_1dim__;
  int L_z_2dim__;
  int beta_a_z_raw_1dim__;
  int beta_av_z_raw_2dim__;
  int sigma_beta_a_z_1dim__;
  int beta_a_z_mean_1dim__;
  int beta_a_z_sd_1dim__;
  int beta_a_z_1dim__;
  int beta_av_z_2dim__;
  int beta_av_z_holdout_2dim__;
  int Omega_beta_z_1dim__;
  int Omega_beta_z_2dim__;
  int covariance_beta_z_1dim__;
  int covariance_beta_z_2dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cascadelevel_features_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> videolevel_features_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_holdout{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cascadelevel_features_holdout{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> videolevel_features_holdout{nullptr, 0};
 
 public:
  ~theta_pl_z0xy_a0y_corr_threeclass_pl_model() { }
  
  inline std::string model_name() const final { return "theta_pl_z0xy_a0y_corr_threeclass_pl_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  theta_pl_z0xy_a0y_corr_threeclass_pl_model(stan::io::var_context& context__,
                                             unsigned int random_seed__ = 0,
                                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "theta_pl_z0xy_a0y_corr_threeclass_pl_model_namespace::theta_pl_z0xy_a0y_corr_threeclass_pl_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 229;
      context__.validate_dims("data initialization",
          "N_cascadelevel_features","int", std::vector<size_t>{});
      N_cascadelevel_features = std::numeric_limits<int>::min();
      
      
      current_statement__ = 229;
      N_cascadelevel_features = context__.vals_i("N_cascadelevel_features")[
          (1 - 1)];
      current_statement__ = 230;
      context__.validate_dims("data initialization","N_videolevel_features",
          "int", std::vector<size_t>{});
      N_videolevel_features = std::numeric_limits<int>::min();
      
      
      current_statement__ = 230;
      N_videolevel_features = context__.vals_i("N_videolevel_features")[
          (1 - 1)];
      current_statement__ = 231;
      context__.validate_dims("data initialization","V_train","int",
           std::vector<size_t>{});
      V_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 231;
      V_train = context__.vals_i("V_train")[(1 - 1)];
      current_statement__ = 231;
      stan::math::check_greater_or_equal(function__, "V_train", V_train, 0);
      current_statement__ = 232;
      context__.validate_dims("data initialization","C_train","int",
           std::vector<size_t>{});
      C_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 232;
      C_train = context__.vals_i("C_train")[(1 - 1)];
      current_statement__ = 232;
      stan::math::check_greater_or_equal(function__, "C_train", C_train, 0);
      current_statement__ = 233;
      context__.validate_dims("data initialization","E_train","int",
           std::vector<size_t>{});
      E_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 233;
      E_train = context__.vals_i("E_train")[(1 - 1)];
      current_statement__ = 233;
      stan::math::check_greater_or_equal(function__, "E_train", E_train, 0);
      current_statement__ = 234;
      stan::math::validate_non_negative_index("N_cascades_per_video_train",
                                              "V_train", V_train);
      current_statement__ = 235;
      context__.validate_dims("data initialization",
          "N_cascades_per_video_train","int",
           std::vector<size_t>{static_cast<size_t>(V_train)});
      N_cascades_per_video_train = 
        std::vector<int>(V_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 235;
      N_cascades_per_video_train = context__.vals_i("N_cascades_per_video_train");
      current_statement__ = 236;
      stan::math::validate_non_negative_index("N_cascadesize_per_cascade_train",
                                              "C_train", C_train);
      current_statement__ = 237;
      context__.validate_dims("data initialization",
          "N_cascadesize_per_cascade_train","int",
           std::vector<size_t>{static_cast<size_t>(C_train)});
      N_cascadesize_per_cascade_train = 
        std::vector<int>(C_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 237;
      N_cascadesize_per_cascade_train = context__.vals_i("N_cascadesize_per_cascade_train");
      current_statement__ = 238;
      stan::math::validate_non_negative_index("d_train", "E_train", E_train);
      current_statement__ = 239;
      context__.validate_dims("data initialization","d_train","double",
           std::vector<size_t>{static_cast<size_t>(E_train)});
      d_train_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(E_train,
          std::numeric_limits<double>::quiet_NaN());
      new (&d_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_train_data__.data(), E_train);
        
      
      {
        std::vector<local_scalar_t__> d_train_flat__;
        current_statement__ = 239;
        d_train_flat__ = context__.vals_r("d_train");
        current_statement__ = 239;
        pos__ = 1;
        current_statement__ = 239;
        for (int sym1__ = 1; sym1__ <= E_train; ++sym1__) {
          current_statement__ = 239;
          stan::model::assign(d_train, d_train_flat__[(pos__ - 1)],
            "assigning variable d_train", stan::model::index_uni(sym1__));
          current_statement__ = 239;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 239;
      stan::math::check_greater_or_equal(function__, "d_train", d_train, 0);
      current_statement__ = 240;
      stan::math::validate_non_negative_index("cascadelevel_features_train",
                                              "N_cascadelevel_features * C_train",
                                              (N_cascadelevel_features *
                                                C_train));
      current_statement__ = 241;
      context__.validate_dims("data initialization",
          "cascadelevel_features_train","double",
           std::vector<size_t>{
            static_cast<size_t>((N_cascadelevel_features * C_train))});
      cascadelevel_features_train_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_cascadelevel_features * C_train),
          std::numeric_limits<double>::quiet_NaN());
      new (&cascadelevel_features_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cascadelevel_features_train_data__.data(), 
        (N_cascadelevel_features * C_train));
      
      {
        std::vector<local_scalar_t__> cascadelevel_features_train_flat__;
        current_statement__ = 241;
        cascadelevel_features_train_flat__ = context__.vals_r("cascadelevel_features_train");
        current_statement__ = 241;
        pos__ = 1;
        current_statement__ = 241;
        for (int sym1__ = 1; sym1__ <= (N_cascadelevel_features * C_train);
             ++sym1__) {
          current_statement__ = 241;
          stan::model::assign(cascadelevel_features_train,
            cascadelevel_features_train_flat__[(pos__ - 1)],
            "assigning variable cascadelevel_features_train", stan::model::index_uni(sym1__));
          current_statement__ = 241;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 242;
      stan::math::validate_non_negative_index("videolevel_features_train",
                                              "N_videolevel_features * V_train",
                                              (N_videolevel_features *
                                                V_train));
      current_statement__ = 243;
      context__.validate_dims("data initialization",
          "videolevel_features_train","double",
           std::vector<size_t>{
            static_cast<size_t>((N_videolevel_features * V_train))});
      videolevel_features_train_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_videolevel_features * V_train),
          std::numeric_limits<double>::quiet_NaN());
      new (&videolevel_features_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(videolevel_features_train_data__.data(), 
        (N_videolevel_features * V_train));
      
      {
        std::vector<local_scalar_t__> videolevel_features_train_flat__;
        current_statement__ = 243;
        videolevel_features_train_flat__ = context__.vals_r("videolevel_features_train");
        current_statement__ = 243;
        pos__ = 1;
        current_statement__ = 243;
        for (int sym1__ = 1; sym1__ <= (N_videolevel_features * V_train);
             ++sym1__) {
          current_statement__ = 243;
          stan::model::assign(videolevel_features_train,
            videolevel_features_train_flat__[(pos__ - 1)],
            "assigning variable videolevel_features_train", stan::model::index_uni(sym1__));
          current_statement__ = 243;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 244;
      context__.validate_dims("data initialization","V_holdout","int",
           std::vector<size_t>{});
      V_holdout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 244;
      V_holdout = context__.vals_i("V_holdout")[(1 - 1)];
      current_statement__ = 244;
      stan::math::check_greater_or_equal(function__, "V_holdout", V_holdout,
                                            0);
      current_statement__ = 245;
      context__.validate_dims("data initialization","C_holdout","int",
           std::vector<size_t>{});
      C_holdout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 245;
      C_holdout = context__.vals_i("C_holdout")[(1 - 1)];
      current_statement__ = 245;
      stan::math::check_greater_or_equal(function__, "C_holdout", C_holdout,
                                            0);
      current_statement__ = 246;
      context__.validate_dims("data initialization","E_holdout","int",
           std::vector<size_t>{});
      E_holdout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 246;
      E_holdout = context__.vals_i("E_holdout")[(1 - 1)];
      current_statement__ = 246;
      stan::math::check_greater_or_equal(function__, "E_holdout", E_holdout,
                                            0);
      current_statement__ = 247;
      stan::math::validate_non_negative_index("N_cascades_per_video_holdout",
                                              "V_holdout", V_holdout);
      current_statement__ = 248;
      context__.validate_dims("data initialization",
          "N_cascades_per_video_holdout","int",
           std::vector<size_t>{static_cast<size_t>(V_holdout)});
      N_cascades_per_video_holdout = 
        std::vector<int>(V_holdout, std::numeric_limits<int>::min());
      
      
      current_statement__ = 248;
      N_cascades_per_video_holdout = context__.vals_i("N_cascades_per_video_holdout");
      current_statement__ = 249;
      stan::math::validate_non_negative_index("N_cascadesize_per_cascade_holdout",
                                              "C_holdout", C_holdout);
      current_statement__ = 250;
      context__.validate_dims("data initialization",
          "N_cascadesize_per_cascade_holdout","int",
           std::vector<size_t>{static_cast<size_t>(C_holdout)});
      N_cascadesize_per_cascade_holdout = 
        std::vector<int>(C_holdout, std::numeric_limits<int>::min());
      
      
      current_statement__ = 250;
      N_cascadesize_per_cascade_holdout = context__.vals_i("N_cascadesize_per_cascade_holdout");
      current_statement__ = 251;
      stan::math::validate_non_negative_index("d_holdout", "E_holdout",
                                              E_holdout);
      current_statement__ = 252;
      context__.validate_dims("data initialization","d_holdout","double",
           std::vector<size_t>{static_cast<size_t>(E_holdout)});
      d_holdout_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(E_holdout,
          std::numeric_limits<double>::quiet_NaN());
      new (&d_holdout) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_holdout_data__.data(), E_holdout);
        
      
      {
        std::vector<local_scalar_t__> d_holdout_flat__;
        current_statement__ = 252;
        d_holdout_flat__ = context__.vals_r("d_holdout");
        current_statement__ = 252;
        pos__ = 1;
        current_statement__ = 252;
        for (int sym1__ = 1; sym1__ <= E_holdout; ++sym1__) {
          current_statement__ = 252;
          stan::model::assign(d_holdout, d_holdout_flat__[(pos__ - 1)],
            "assigning variable d_holdout", stan::model::index_uni(sym1__));
          current_statement__ = 252;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 252;
      stan::math::check_greater_or_equal(function__, "d_holdout", d_holdout,
                                            0);
      current_statement__ = 253;
      stan::math::validate_non_negative_index("cascadelevel_features_holdout",
                                              "N_cascadelevel_features * C_holdout",
                                              (N_cascadelevel_features *
                                                C_holdout));
      current_statement__ = 254;
      context__.validate_dims("data initialization",
          "cascadelevel_features_holdout","double",
           std::vector<size_t>{
            static_cast<size_t>((N_cascadelevel_features * C_holdout))});
      cascadelevel_features_holdout_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_cascadelevel_features * C_holdout),
          std::numeric_limits<double>::quiet_NaN());
      new (&cascadelevel_features_holdout) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cascadelevel_features_holdout_data__.data(), 
        (N_cascadelevel_features * C_holdout));
      
      {
        std::vector<local_scalar_t__> cascadelevel_features_holdout_flat__;
        current_statement__ = 254;
        cascadelevel_features_holdout_flat__ = context__.vals_r("cascadelevel_features_holdout");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= (N_cascadelevel_features * C_holdout);
             ++sym1__) {
          current_statement__ = 254;
          stan::model::assign(cascadelevel_features_holdout,
            cascadelevel_features_holdout_flat__[(pos__ - 1)],
            "assigning variable cascadelevel_features_holdout", stan::model::index_uni(sym1__));
          current_statement__ = 254;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 255;
      stan::math::validate_non_negative_index("videolevel_features_holdout",
                                              "N_videolevel_features * V_holdout",
                                              (N_videolevel_features *
                                                V_holdout));
      current_statement__ = 256;
      context__.validate_dims("data initialization",
          "videolevel_features_holdout","double",
           std::vector<size_t>{
            static_cast<size_t>((N_videolevel_features * V_holdout))});
      videolevel_features_holdout_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_videolevel_features * V_holdout),
          std::numeric_limits<double>::quiet_NaN());
      new (&videolevel_features_holdout) Eigen::Map<Eigen::Matrix<double, -1, 1>>(videolevel_features_holdout_data__.data(), 
        (N_videolevel_features * V_holdout));
      
      {
        std::vector<local_scalar_t__> videolevel_features_holdout_flat__;
        current_statement__ = 256;
        videolevel_features_holdout_flat__ = context__.vals_r("videolevel_features_holdout");
        current_statement__ = 256;
        pos__ = 1;
        current_statement__ = 256;
        for (int sym1__ = 1; sym1__ <= (N_videolevel_features * V_holdout);
             ++sym1__) {
          current_statement__ = 256;
          stan::model::assign(videolevel_features_holdout,
            videolevel_features_holdout_flat__[(pos__ - 1)],
            "assigning variable videolevel_features_holdout", stan::model::index_uni(sym1__));
          current_statement__ = 256;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 257;
      L_z_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 257;
      L_z_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 257;
      stan::math::validate_non_negative_index("L_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              L_z_1dim__);
      current_statement__ = 257;
      L_z_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 257;
      L_z_2dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 257;
      stan::math::validate_non_negative_index("L_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              L_z_2dim__);
      current_statement__ = 258;
      beta_a_z_raw_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 258;
      beta_a_z_raw_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 258;
      stan::math::validate_non_negative_index("beta_a_z_raw",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_a_z_raw_1dim__);
      current_statement__ = 259;
      stan::math::validate_non_negative_index("beta_av_z_raw", "V_train",
                                              V_train);
      current_statement__ = 260;
      beta_av_z_raw_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 260;
      beta_av_z_raw_2dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 260;
      stan::math::validate_non_negative_index("beta_av_z_raw",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_av_z_raw_2dim__);
      current_statement__ = 261;
      stan::math::validate_non_negative_index("beta_av_plfast_raw",
                                              "V_train", V_train);
      current_statement__ = 262;
      stan::math::validate_non_negative_index("beta_av_plmid_raw", "V_train",
                                              V_train);
      current_statement__ = 263;
      stan::math::validate_non_negative_index("beta_av_plslow_raw",
                                              "V_train", V_train);
      current_statement__ = 264;
      sigma_beta_a_z_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 264;
      sigma_beta_a_z_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 264;
      stan::math::validate_non_negative_index("sigma_beta_a_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              sigma_beta_a_z_1dim__);
      current_statement__ = 265;
      stan::math::validate_non_negative_index("gamma_a_zfast_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 266;
      stan::math::validate_non_negative_index("gamma_a_zslow_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 267;
      stan::math::validate_non_negative_index("gamma_a_plfast_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("gamma_a_plmid_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("gamma_a_plslow_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 270;
      beta_a_z_mean_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 270;
      beta_a_z_mean_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 270;
      stan::math::validate_non_negative_index("beta_a_z_mean",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_a_z_mean_1dim__);
      current_statement__ = 271;
      beta_a_z_sd_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 271;
      beta_a_z_sd_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 271;
      stan::math::validate_non_negative_index("beta_a_z_sd",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_a_z_sd_1dim__);
      current_statement__ = 272;
      beta_a_z_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 272;
      beta_a_z_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 272;
      stan::math::validate_non_negative_index("beta_a_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_a_z_1dim__);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("beta_av_z", "V_train", V_train);
      current_statement__ = 274;
      beta_av_z_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 274;
      beta_av_z_2dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 274;
      stan::math::validate_non_negative_index("beta_av_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_av_z_2dim__);
      current_statement__ = 275;
      stan::math::validate_non_negative_index("beta_av_plfast", "V_train",
                                              V_train);
      current_statement__ = 276;
      stan::math::validate_non_negative_index("beta_av_plmid", "V_train",
                                              V_train);
      current_statement__ = 277;
      stan::math::validate_non_negative_index("beta_av_plslow", "V_train",
                                              V_train);
      current_statement__ = 278;
      stan::math::validate_non_negative_index("gamma_a_zfast",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 279;
      stan::math::validate_non_negative_index("gamma_a_zslow",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 280;
      stan::math::validate_non_negative_index("gamma_a_plfast",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("gamma_a_plslow",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 282;
      stan::math::validate_non_negative_index("gamma_a_plmid",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("beta_av_z_holdout",
                                              "V_holdout", V_holdout);
      current_statement__ = 284;
      beta_av_z_holdout_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 284;
      beta_av_z_holdout_2dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 284;
      stan::math::validate_non_negative_index("beta_av_z_holdout",
                                              "2 + 2 * N_cascadelevel_features",
                                              beta_av_z_holdout_2dim__);
      current_statement__ = 285;
      stan::math::validate_non_negative_index("beta_av_plslow_holdout",
                                              "V_holdout", V_holdout);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("beta_av_plfast_holdout",
                                              "V_holdout", V_holdout);
      current_statement__ = 287;
      stan::math::validate_non_negative_index("beta_av_plmid_holdout",
                                              "V_holdout", V_holdout);
      current_statement__ = 288;
      Omega_beta_z_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 288;
      Omega_beta_z_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 288;
      stan::math::validate_non_negative_index("Omega_beta_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              Omega_beta_z_1dim__);
      current_statement__ = 289;
      Omega_beta_z_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 289;
      Omega_beta_z_2dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 289;
      stan::math::validate_non_negative_index("Omega_beta_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              Omega_beta_z_2dim__);
      current_statement__ = 290;
      covariance_beta_z_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 290;
      covariance_beta_z_1dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 290;
      stan::math::validate_non_negative_index("covariance_beta_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              covariance_beta_z_1dim__);
      current_statement__ = 291;
      covariance_beta_z_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 291;
      covariance_beta_z_2dim__ = (2 + (2 * N_cascadelevel_features));
      current_statement__ = 291;
      stan::math::validate_non_negative_index("covariance_beta_z",
                                              "2 + 2 * N_cascadelevel_features",
                                              covariance_beta_z_2dim__);
      current_statement__ = 292;
      stan::math::validate_non_negative_index("log_lik", "V_holdout",
                                              V_holdout);
      current_statement__ = 293;
      stan::math::validate_non_negative_index("log_lik_per_cascade",
                                              "C_holdout", C_holdout);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = ((L_z_1dim__ * (L_z_1dim__ - 1)) / 2)
       + ((2 * (2 - 1)) / 2) + ((2 * (2 - 1)) / 2) + ((2 * (2 - 1)) / 2)
       + beta_a_z_raw_1dim__ + 2 + 2 + 2 + (V_train * beta_av_z_raw_2dim__)
       + (V_train * 2) + (V_train * 2) + (V_train * 2)
       + sigma_beta_a_z_1dim__ + 2 + 2 + 2 + 1 + N_videolevel_features + 
      1 + N_videolevel_features + 1 + N_videolevel_features + 1
       + N_videolevel_features + 1 + N_videolevel_features;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "theta_pl_z0xy_a0y_corr_threeclass_pl_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> L_z =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(L_z_1dim__,
           L_z_2dim__, DUMMY_VAR__);
      current_statement__ = 1;
      L_z = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
              L_z_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_plfast =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2, DUMMY_VAR__);
      current_statement__ = 2;
      L_plfast = in__.template read_constrain_cholesky_factor_corr<
                   Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                   2);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_plmid =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2, DUMMY_VAR__);
      current_statement__ = 3;
      L_plmid = in__.template read_constrain_cholesky_factor_corr<
                  Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                  2);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_plslow =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2, DUMMY_VAR__);
      current_statement__ = 4;
      L_plslow = in__.template read_constrain_cholesky_factor_corr<
                   Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                   2);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_z_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           beta_a_z_raw_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      beta_a_z_raw = in__.template read<
                       Eigen::Matrix<local_scalar_t__, -1, 1>>(
                       beta_a_z_raw_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plfast_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 6;
      beta_a_plfast_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plmid_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 7;
      beta_a_plmid_raw = in__.template read<
                           Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plslow_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 8;
      beta_a_plslow_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_z_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
             beta_av_z_raw_2dim__, DUMMY_VAR__));
      current_statement__ = 9;
      beta_av_z_raw = in__.template read_constrain_lub<
                        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, 
                        jacobian__>(-5, 5, lp__, V_train,
                        beta_av_z_raw_2dim__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plfast_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 10;
      beta_av_plfast_raw = in__.template read<
                             std::vector<
                               Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                             V_train, 2);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plmid_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 11;
      beta_av_plmid_raw = in__.template read<
                            std::vector<
                              Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                            V_train, 2);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plslow_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 12;
      beta_av_plslow_raw = in__.template read<
                             std::vector<
                               Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                             V_train, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_z =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           sigma_beta_a_z_1dim__, DUMMY_VAR__);
      current_statement__ = 13;
      sigma_beta_a_z = in__.template read_constrain_lb<
                         Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                         0, lp__, sigma_beta_a_z_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_plfast =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 14;
      sigma_beta_a_plfast = in__.template read_constrain_lb<
                              Eigen::Matrix<local_scalar_t__, -1, 1>, 
                              jacobian__>(0, lp__, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_plmid =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 15;
      sigma_beta_a_plmid = in__.template read_constrain_lb<
                             Eigen::Matrix<local_scalar_t__, -1, 1>, 
                             jacobian__>(0, lp__, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_plslow =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 16;
      sigma_beta_a_plslow = in__.template read_constrain_lb<
                              Eigen::Matrix<local_scalar_t__, -1, 1>, 
                              jacobian__>(0, lp__, 2);
      local_scalar_t__ gamma_a_zfast_sd = DUMMY_VAR__;
      current_statement__ = 17;
      gamma_a_zfast_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_zfast_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 18;
      gamma_a_zfast_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      local_scalar_t__ gamma_a_zslow_sd = DUMMY_VAR__;
      current_statement__ = 19;
      gamma_a_zslow_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_zslow_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 20;
      gamma_a_zslow_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      local_scalar_t__ gamma_a_plfast_sd = DUMMY_VAR__;
      current_statement__ = 21;
      gamma_a_plfast_sd = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plfast_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 22;
      gamma_a_plfast_raw = in__.template read<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>(
                             N_videolevel_features);
      local_scalar_t__ gamma_a_plmid_sd = DUMMY_VAR__;
      current_statement__ = 23;
      gamma_a_plmid_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plmid_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 24;
      gamma_a_plmid_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      local_scalar_t__ gamma_a_plslow_sd = DUMMY_VAR__;
      current_statement__ = 25;
      gamma_a_plslow_sd = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plslow_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 26;
      gamma_a_plslow_raw = in__.template read<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>(
                             N_videolevel_features);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_z_mean =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           beta_a_z_mean_1dim__, DUMMY_VAR__);
      current_statement__ = 27;
      stan::model::assign(beta_a_z_mean,
        stan::math::rep_vector(0, (2 + (2 * N_cascadelevel_features))),
        "assigning variable beta_a_z_mean");
      current_statement__ = 53;
      stan::model::assign(beta_a_z_mean, -2,
        "assigning variable beta_a_z_mean", stan::model::index_uni(1));
      current_statement__ = 54;
      stan::model::assign(beta_a_z_mean, -2,
        "assigning variable beta_a_z_mean", stan::model::index_uni((2 +
                                                                    N_cascadelevel_features)));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_z_sd =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_z_sd_1dim__,
           DUMMY_VAR__);
      current_statement__ = 28;
      stan::model::assign(beta_a_z_sd,
        stan::math::rep_vector(0.1, (2 + (2 * N_cascadelevel_features))),
        "assigning variable beta_a_z_sd");
      current_statement__ = 55;
      stan::model::assign(beta_a_z_sd, 1,
        "assigning variable beta_a_z_sd", stan::model::index_uni(1));
      current_statement__ = 56;
      stan::model::assign(beta_a_z_sd, 1,
        "assigning variable beta_a_z_sd", stan::model::index_uni((2 +
                                                                   N_cascadelevel_features)));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plslow_mean =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(beta_a_plslow_mean, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plslow_mean");
      current_statement__ = 57;
      stan::model::assign(beta_a_plslow_mean, 4,
        "assigning variable beta_a_plslow_mean", stan::model::index_uni(1));
      current_statement__ = 58;
      stan::model::assign(beta_a_plslow_mean, 4.805,
        "assigning variable beta_a_plslow_mean", stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plslow_sd =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 30;
      stan::model::assign(beta_a_plslow_sd, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plslow_sd");
      current_statement__ = 59;
      stan::model::assign(beta_a_plslow_sd, 0.5,
        "assigning variable beta_a_plslow_sd", stan::model::index_uni(1));
      current_statement__ = 60;
      stan::model::assign(beta_a_plslow_sd, 0.5,
        "assigning variable beta_a_plslow_sd", stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plmid_mean =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 31;
      stan::model::assign(beta_a_plmid_mean, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plmid_mean");
      current_statement__ = 61;
      stan::model::assign(beta_a_plmid_mean, -0.41,
        "assigning variable beta_a_plmid_mean", stan::model::index_uni(1));
      current_statement__ = 62;
      stan::model::assign(beta_a_plmid_mean, -1.37,
        "assigning variable beta_a_plmid_mean", stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plmid_sd =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 32;
      stan::model::assign(beta_a_plmid_sd, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plmid_sd");
      current_statement__ = 63;
      stan::model::assign(beta_a_plmid_sd, 0.5,
        "assigning variable beta_a_plmid_sd", stan::model::index_uni(1));
      current_statement__ = 64;
      stan::model::assign(beta_a_plmid_sd, 1,
        "assigning variable beta_a_plmid_sd", stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plfast_mean =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 33;
      stan::model::assign(beta_a_plfast_mean, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plfast_mean");
      current_statement__ = 65;
      stan::model::assign(beta_a_plfast_mean, 4,
        "assigning variable beta_a_plfast_mean", stan::model::index_uni(1));
      current_statement__ = 66;
      stan::model::assign(beta_a_plfast_mean, 1,
        "assigning variable beta_a_plfast_mean", stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plfast_sd =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 34;
      stan::model::assign(beta_a_plfast_sd, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plfast_sd");
      current_statement__ = 67;
      stan::model::assign(beta_a_plfast_sd, 0.5,
        "assigning variable beta_a_plfast_sd", stan::model::index_uni(1));
      current_statement__ = 68;
      stan::model::assign(beta_a_plfast_sd, 0.5,
        "assigning variable beta_a_plfast_sd", stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_z =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_z_1dim__,
           DUMMY_VAR__);
      current_statement__ = 35;
      stan::model::assign(beta_a_z,
        stan::math::add(beta_a_z_mean,
          stan::math::elt_multiply(beta_a_z_sd, beta_a_z_raw)),
        "assigning variable beta_a_z");
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plfast =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 36;
      stan::model::assign(beta_a_plfast,
        stan::math::add(beta_a_plfast_mean,
          stan::math::elt_multiply(beta_a_plfast_sd, beta_a_plfast_raw)),
        "assigning variable beta_a_plfast");
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plmid =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 37;
      stan::model::assign(beta_a_plmid,
        stan::math::add(beta_a_plmid_mean,
          stan::math::elt_multiply(beta_a_plmid_sd, beta_a_plmid_raw)),
        "assigning variable beta_a_plmid");
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plslow =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 38;
      stan::model::assign(beta_a_plslow,
        stan::math::add(beta_a_plslow_mean,
          stan::math::elt_multiply(beta_a_plslow_sd, beta_a_plslow_raw)),
        "assigning variable beta_a_plslow");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_z =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_av_z_2dim__,
             DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plfast =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plmid =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plslow =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 74;
      for (int v = 1; v <= V_train; ++v) {
        current_statement__ = 69;
        stan::model::assign(beta_av_z,
          stan::math::add(beta_a_z,
            stan::math::elt_multiply(sigma_beta_a_z,
              stan::math::multiply(L_z,
                stan::model::rvalue(beta_av_z_raw, "beta_av_z_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_z", stan::model::index_uni(v));
        current_statement__ = 70;
        stan::model::assign(beta_av_plfast,
          stan::math::add(beta_a_plfast,
            stan::math::elt_multiply(sigma_beta_a_plfast,
              stan::math::multiply(L_plfast,
                stan::model::rvalue(beta_av_plfast_raw, "beta_av_plfast_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_plfast", stan::model::index_uni(v));
        current_statement__ = 71;
        stan::model::assign(beta_av_plmid,
          stan::math::add(beta_a_plmid,
            stan::math::elt_multiply(sigma_beta_a_plmid,
              stan::math::multiply(L_plmid,
                stan::model::rvalue(beta_av_plmid_raw, "beta_av_plmid_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_plmid", stan::model::index_uni(v));
        current_statement__ = 72;
        stan::model::assign(beta_av_plslow,
          stan::math::add(beta_a_plslow,
            stan::math::elt_multiply(sigma_beta_a_plslow,
              stan::math::multiply(L_plslow,
                stan::model::rvalue(beta_av_plslow_raw, "beta_av_plslow_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_plslow", stan::model::index_uni(v));
      }
      local_scalar_t__ gamma_a_zfast_mean = DUMMY_VAR__;
      current_statement__ = 43;
      gamma_a_zfast_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_zfast =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 44;
      stan::model::assign(gamma_a_zfast,
        stan::math::add(gamma_a_zfast_mean,
          stan::math::multiply(gamma_a_zfast_sd, gamma_a_zfast_raw)),
        "assigning variable gamma_a_zfast");
      local_scalar_t__ gamma_a_zslow_mean = DUMMY_VAR__;
      current_statement__ = 45;
      gamma_a_zslow_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_zslow =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 46;
      stan::model::assign(gamma_a_zslow,
        stan::math::add(gamma_a_zslow_mean,
          stan::math::multiply(gamma_a_zslow_sd, gamma_a_zslow_raw)),
        "assigning variable gamma_a_zslow");
      local_scalar_t__ gamma_a_plfast_mean = DUMMY_VAR__;
      current_statement__ = 47;
      gamma_a_plfast_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plfast =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 48;
      stan::model::assign(gamma_a_plfast,
        stan::math::add(gamma_a_plfast_mean,
          stan::math::multiply(gamma_a_plfast_sd, gamma_a_plfast_raw)),
        "assigning variable gamma_a_plfast");
      local_scalar_t__ gamma_a_plslow_mean = DUMMY_VAR__;
      current_statement__ = 49;
      gamma_a_plslow_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plslow =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 50;
      stan::model::assign(gamma_a_plslow,
        stan::math::add(gamma_a_plslow_mean,
          stan::math::multiply(gamma_a_plslow_sd, gamma_a_plslow_raw)),
        "assigning variable gamma_a_plslow");
      local_scalar_t__ gamma_a_plmid_mean = DUMMY_VAR__;
      current_statement__ = 51;
      gamma_a_plmid_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plmid =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 52;
      stan::model::assign(gamma_a_plmid,
        stan::math::add(gamma_a_plmid_mean,
          stan::math::multiply(gamma_a_plmid_sd, gamma_a_plmid_raw)),
        "assigning variable gamma_a_plmid");
      {
        current_statement__ = 146;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_z, "sigma_beta_a_z",
              stan::model::index_uni(1)), 0, 1));
        current_statement__ = 147;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_z, "sigma_beta_a_z",
              stan::model::index_min_max(2, (1 + N_cascadelevel_features))),
            0, 0.1));
        current_statement__ = 148;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_z, "sigma_beta_a_z",
              stan::model::index_uni((2 + N_cascadelevel_features))), 0, 1));
        current_statement__ = 149;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_z, "sigma_beta_a_z",
              stan::model::index_min((3 + N_cascadelevel_features))), 0, 0.1));
        current_statement__ = 150;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_plfast, "sigma_beta_a_plfast",
              stan::model::index_uni(1)), 0, 0.5));
        current_statement__ = 151;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_plfast, "sigma_beta_a_plfast",
              stan::model::index_uni(2)), 0, 0.5));
        current_statement__ = 152;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_plmid, "sigma_beta_a_plmid",
              stan::model::index_uni(1)), 0, 0.5));
        current_statement__ = 153;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_plmid, "sigma_beta_a_plmid",
              stan::model::index_uni(2)), 0, 1));
        current_statement__ = 154;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_plslow, "sigma_beta_a_plslow",
              stan::model::index_uni(1)), 0, 0.5));
        current_statement__ = 155;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a_plslow, "sigma_beta_a_plslow",
              stan::model::index_uni(2)), 0, 0.5));
        current_statement__ = 156;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L_z, 2));
        current_statement__ = 157;
        lp_accum__.add(
          stan::math::lkj_corr_cholesky_lpdf<propto__>(L_plslow, 0.5));
        current_statement__ = 158;
        lp_accum__.add(
          stan::math::lkj_corr_cholesky_lpdf<propto__>(L_plmid, 0.5));
        current_statement__ = 159;
        lp_accum__.add(
          stan::math::lkj_corr_cholesky_lpdf<propto__>(L_plfast, 0.5));
        current_statement__ = 160;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_a_z_raw, 0, 1));
        current_statement__ = 161;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(beta_a_plmid_raw, 0, 1));
        current_statement__ = 162;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(beta_a_plfast_raw, 0, 1));
        current_statement__ = 163;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(beta_a_plslow_raw, 0, 1));
        current_statement__ = 164;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_a_zfast_sd, 0.01));
        current_statement__ = 165;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_a_zfast_raw, 0, 1));
        current_statement__ = 166;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_a_zslow_sd, 10));
        current_statement__ = 167;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_a_zslow_raw, 0, 1));
        current_statement__ = 168;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_a_plfast_sd, 0.01));
        current_statement__ = 169;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_a_plfast_raw, 0, 1));
        current_statement__ = 170;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_a_plslow_sd, 0.01));
        current_statement__ = 171;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_a_plslow_raw, 0, 1));
        current_statement__ = 172;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_a_plmid_sd, 0.01));
        current_statement__ = 173;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_a_plmid_raw, 0, 1));
        int pos_C = std::numeric_limits<int>::min();
        current_statement__ = 174;
        pos_C = 1;
        int pos_E = std::numeric_limits<int>::min();
        current_statement__ = 175;
        pos_E = 1;
        current_statement__ = 227;
        for (int v = 1; v <= V_train; ++v) {
          int C_of_v = std::numeric_limits<int>::min();
          current_statement__ = 176;
          C_of_v = stan::model::rvalue(N_cascades_per_video_train,
                     "N_cascades_per_video_train", stan::model::index_uni(v));
          current_statement__ = 177;
          stan::math::validate_non_negative_index("y_av",
                                                  "N_videolevel_features",
                                                  N_videolevel_features);
          Eigen::Matrix<local_scalar_t__, -1, 1> y_av =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
               N_videolevel_features, DUMMY_VAR__);
          current_statement__ = 178;
          stan::model::assign(y_av,
            stan::model::rvalue(videolevel_features_train,
              "videolevel_features_train",
              stan::model::index_min_max((1 +
                                           ((v - 1) * N_videolevel_features)), 
                (v * N_videolevel_features))), "assigning variable y_av");
          local_scalar_t__ gamma_effect_on_slow = DUMMY_VAR__;
          current_statement__ = 179;
          gamma_effect_on_slow = stan::math::dot_product(gamma_a_zslow, y_av);
          local_scalar_t__ gamma_effect_on_fast = DUMMY_VAR__;
          current_statement__ = 180;
          gamma_effect_on_fast = stan::math::dot_product(gamma_a_zfast, y_av);
          local_scalar_t__ gamma_effect_on_plslow = DUMMY_VAR__;
          current_statement__ = 181;
          gamma_effect_on_plslow = stan::math::dot_product(gamma_a_plslow,
                                     y_av);
          local_scalar_t__ gamma_effect_on_plfast = DUMMY_VAR__;
          current_statement__ = 182;
          gamma_effect_on_plfast = stan::math::dot_product(gamma_a_plfast,
                                     y_av);
          local_scalar_t__ gamma_effect_on_plmid = DUMMY_VAR__;
          current_statement__ = 183;
          gamma_effect_on_plmid = stan::math::dot_product(gamma_a_plmid,
                                    y_av);
          current_statement__ = 184;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(beta_av_z_raw, "beta_av_z_raw",
                stan::model::index_uni(v)), 0, 1));
          current_statement__ = 185;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(beta_av_plmid_raw, "beta_av_plmid_raw",
                stan::model::index_uni(v)), 0, 1));
          current_statement__ = 186;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(beta_av_plfast_raw, "beta_av_plfast_raw",
                stan::model::index_uni(v)), 0, 1));
          current_statement__ = 187;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(beta_av_plslow_raw, "beta_av_plslow_raw",
                stan::model::index_uni(v)), 0, 1));
          local_scalar_t__ log_theta_plslow_avc = DUMMY_VAR__;
          current_statement__ = 188;
          log_theta_plslow_avc = (gamma_effect_on_plslow +
                                   stan::model::rvalue(
                                     stan::model::rvalue(beta_av_plslow, "beta_av_plslow",
  stan::model::index_uni(v)),
                                     "beta_av_plslow[v]",
                                     stan::model::index_uni(1)));
          local_scalar_t__ log_theta_plfast_avc = DUMMY_VAR__;
          current_statement__ = 189;
          log_theta_plfast_avc = (gamma_effect_on_plfast +
                                   stan::model::rvalue(
                                     stan::model::rvalue(beta_av_plfast, "beta_av_plfast",
  stan::model::index_uni(v)),
                                     "beta_av_plfast[v]",
                                     stan::model::index_uni(1)));
          local_scalar_t__ log_theta_plmid_avc = DUMMY_VAR__;
          current_statement__ = 190;
          log_theta_plmid_avc = (gamma_effect_on_plmid +
                                  stan::model::rvalue(
                                    stan::model::rvalue(beta_av_plmid, "beta_av_plmid",
  stan::model::index_uni(v)),
                                    "beta_av_plmid[v]",
                                    stan::model::index_uni(1)));
          local_scalar_t__ log_cutoff_plslow_avc = DUMMY_VAR__;
          current_statement__ = 191;
          log_cutoff_plslow_avc = stan::model::rvalue(
                                    stan::model::rvalue(beta_av_plslow, "beta_av_plslow",
  stan::model::index_uni(v)),
                                    "beta_av_plslow[v]",
                                    stan::model::index_uni(2));
          local_scalar_t__ log_cutoff_plfast_avc = DUMMY_VAR__;
          current_statement__ = 192;
          log_cutoff_plfast_avc = stan::model::rvalue(
                                    stan::model::rvalue(beta_av_plfast, "beta_av_plfast",
  stan::model::index_uni(v)),
                                    "beta_av_plfast[v]",
                                    stan::model::index_uni(2));
          local_scalar_t__ log_cutoff_plmid_avc = DUMMY_VAR__;
          current_statement__ = 193;
          log_cutoff_plmid_avc = stan::model::rvalue(
                                   stan::model::rvalue(beta_av_plmid, "beta_av_plmid",
  stan::model::index_uni(v)),
                                   "beta_av_plmid[v]",
                                   stan::model::index_uni(2));
          local_scalar_t__ theta_plmid_avc = DUMMY_VAR__;
          current_statement__ = 194;
          theta_plmid_avc = stan::math::exp(log_theta_plmid_avc);
          local_scalar_t__ cutoff_plmid_avc = DUMMY_VAR__;
          current_statement__ = 195;
          cutoff_plmid_avc = stan::math::exp(log_cutoff_plmid_avc);
          local_scalar_t__ theta_plfast_avc = DUMMY_VAR__;
          current_statement__ = 196;
          theta_plfast_avc = stan::math::exp(log_theta_plfast_avc);
          local_scalar_t__ cutoff_plfast_avc = DUMMY_VAR__;
          current_statement__ = 197;
          cutoff_plfast_avc = stan::math::exp(log_cutoff_plfast_avc);
          local_scalar_t__ theta_plslow_avc = DUMMY_VAR__;
          current_statement__ = 198;
          theta_plslow_avc = stan::math::exp(log_theta_plslow_avc);
          local_scalar_t__ cutoff_plslow_avc = DUMMY_VAR__;
          current_statement__ = 199;
          cutoff_plslow_avc = stan::math::exp(log_cutoff_plslow_avc);
          current_statement__ = 200;
          stan::math::validate_non_negative_index("cascade_sizes", "C_of_v",
                                                  C_of_v);
          std::vector<int> cascade_sizes =
             std::vector<int>(C_of_v, std::numeric_limits<int>::min());
          current_statement__ = 201;
          stan::model::assign(cascade_sizes,
            stan::model::rvalue(N_cascadesize_per_cascade_train,
              "N_cascadesize_per_cascade_train",
              stan::model::index_min_max(pos_C, ((pos_C + C_of_v) - 1))),
            "assigning variable cascade_sizes");
          current_statement__ = 224;
          for (int k = 1; k <= C_of_v; ++k) {
            int G = std::numeric_limits<int>::min();
            current_statement__ = 202;
            G = stan::model::rvalue(cascade_sizes, "cascade_sizes",
                  stan::model::index_uni(k));
            current_statement__ = 203;
            stan::math::validate_non_negative_index("x_avc",
                                                    "N_cascadelevel_features + 1",
                                                    (N_cascadelevel_features
                                                      + 1));
            Eigen::Matrix<local_scalar_t__, -1, 1> x_avc =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
                 (N_cascadelevel_features + 1), DUMMY_VAR__);
            current_statement__ = 204;
            stan::model::assign(x_avc,
              stan::math::append_row(1,
                stan::model::rvalue(cascadelevel_features_train,
                  "cascadelevel_features_train",
                  stan::model::index_min_max((((((pos_C + k) - 1) - 1) *
                                                N_cascadelevel_features) + 1), 
                    (((pos_C + k) - 1) * N_cascadelevel_features)))),
              "assigning variable x_avc");
            Eigen::Matrix<local_scalar_t__, -1, 1> z_to_raise =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3,
                 DUMMY_VAR__);
            current_statement__ = 205;
            stan::model::assign(z_to_raise, stan::math::rep_vector(0, 3),
              "assigning variable z_to_raise");
            current_statement__ = 206;
            stan::model::assign(z_to_raise,
              (gamma_effect_on_slow +
                stan::math::dot_product(
                  stan::model::rvalue(
                    stan::model::rvalue(beta_av_z, "beta_av_z", stan::model::index_uni(v)),
                    "beta_av_z[v]",
                    stan::model::index_min_max(1, (1 +
                                                    N_cascadelevel_features))),
                  x_avc)),
              "assigning variable z_to_raise", stan::model::index_uni(2));
            current_statement__ = 207;
            stan::model::assign(z_to_raise,
              (gamma_effect_on_fast +
                stan::math::dot_product(
                  stan::model::rvalue(
                    stan::model::rvalue(beta_av_z, "beta_av_z", stan::model::index_uni(v)),
                    "beta_av_z[v]",
                    stan::model::index_min_max((2 + N_cascadelevel_features), 
                      (2 + (2 * N_cascadelevel_features)))), x_avc)),
              "assigning variable z_to_raise", stan::model::index_uni(3));
            Eigen::Matrix<local_scalar_t__, -1, 1> logz_avc =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3,
                 DUMMY_VAR__);
            current_statement__ = 208;
            stan::model::assign(logz_avc,
              stan::math::log_softmax(z_to_raise),
              "assigning variable logz_avc");
            local_scalar_t__ log_plfast = DUMMY_VAR__;
            current_statement__ = 209;
            log_plfast = 0;
            local_scalar_t__ log_plslow = DUMMY_VAR__;
            current_statement__ = 210;
            log_plslow = 0;
            local_scalar_t__ log_plmid = DUMMY_VAR__;
            current_statement__ = 211;
            log_plmid = 0;
            current_statement__ = 217;
            for (int i = 1; i <= (G - 1); ++i) {
              current_statement__ = 212;
              log_plmid = (log_plmid +
                            stan::math::log_sum_exp(
                              log_g_pl(
                                stan::model::rvalue(d_train, "d_train",
                                  stan::model::index_min_max(pos_E, ((pos_E +
                                                                    i) - 1))),
                                theta_plmid_avc, cutoff_plmid_avc,
                                log_theta_plmid_avc,
                                log_cutoff_plmid_avc, pstream__)));
              current_statement__ = 213;
              log_plfast = (log_plfast +
                             stan::math::log_sum_exp(
                               log_g_pl(
                                 stan::model::rvalue(d_train, "d_train",
                                   stan::model::index_min_max(pos_E, 
                                     ((pos_E + i) - 1))), theta_plfast_avc,
                                 cutoff_plfast_avc, log_theta_plfast_avc,
                                 log_cutoff_plfast_avc, pstream__)));
              current_statement__ = 214;
              log_plslow = (log_plslow +
                             stan::math::log_sum_exp(
                               log_g_pl(
                                 stan::model::rvalue(d_train, "d_train",
                                   stan::model::index_min_max(pos_E, 
                                     ((pos_E + i) - 1))), theta_plslow_avc,
                                 cutoff_plslow_avc, log_theta_plslow_avc,
                                 log_cutoff_plslow_avc, pstream__)));
              current_statement__ = 215;
              pos_E = (pos_E + i);
            }
            Eigen::Matrix<local_scalar_t__, -1, 1> log_l =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3,
                 DUMMY_VAR__);
            current_statement__ = 219;
            stan::model::assign(log_l,
              (stan::model::rvalue(logz_avc, "logz_avc",
                 stan::model::index_uni(1)) + log_plmid),
              "assigning variable log_l", stan::model::index_uni(1));
            current_statement__ = 220;
            stan::model::assign(log_l,
              (stan::model::rvalue(logz_avc, "logz_avc",
                 stan::model::index_uni(2)) + log_plslow),
              "assigning variable log_l", stan::model::index_uni(2));
            current_statement__ = 221;
            stan::model::assign(log_l,
              (stan::model::rvalue(logz_avc, "logz_avc",
                 stan::model::index_uni(3)) + log_plfast),
              "assigning variable log_l", stan::model::index_uni(3));
            current_statement__ = 222;
            lp_accum__.add(stan::math::log_sum_exp(log_l));
          }
          current_statement__ = 225;
          pos_C = (pos_C + C_of_v);
        }
        current_statement__ = 228;
        if (pstream__) {
          stan::math::stan_print(pstream__, "total E: ");
          stan::math::stan_print(pstream__, pos_E);
          stan::math::stan_print(pstream__, "\n");
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "theta_pl_z0xy_a0y_corr_threeclass_pl_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> L_z =
         Eigen::Matrix<double, -1, -1>::Constant(L_z_1dim__, L_z_2dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      L_z = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
              L_z_2dim__);
      Eigen::Matrix<double, -1, -1> L_plfast =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      L_plfast = in__.template read_constrain_cholesky_factor_corr<
                   Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                   2);
      Eigen::Matrix<double, -1, -1> L_plmid =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      L_plmid = in__.template read_constrain_cholesky_factor_corr<
                  Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                  2);
      Eigen::Matrix<double, -1, -1> L_plslow =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      L_plslow = in__.template read_constrain_cholesky_factor_corr<
                   Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
                   2);
      Eigen::Matrix<double, -1, 1> beta_a_z_raw =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_z_raw_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      beta_a_z_raw = in__.template read<
                       Eigen::Matrix<local_scalar_t__, -1, 1>>(
                       beta_a_z_raw_1dim__);
      Eigen::Matrix<double, -1, 1> beta_a_plfast_raw =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      beta_a_plfast_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<double, -1, 1> beta_a_plmid_raw =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      beta_a_plmid_raw = in__.template read<
                           Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<double, -1, 1> beta_a_plslow_raw =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      beta_a_plslow_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_z_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(beta_av_z_raw_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 9;
      beta_av_z_raw = in__.template read_constrain_lub<
                        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, 
                        jacobian__>(-5, 5, lp__, V_train,
                        beta_av_z_raw_2dim__);
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plfast_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 10;
      beta_av_plfast_raw = in__.template read<
                             std::vector<
                               Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                             V_train, 2);
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plmid_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 11;
      beta_av_plmid_raw = in__.template read<
                            std::vector<
                              Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                            V_train, 2);
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plslow_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 12;
      beta_av_plslow_raw = in__.template read<
                             std::vector<
                               Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                             V_train, 2);
      Eigen::Matrix<double, -1, 1> sigma_beta_a_z =
         Eigen::Matrix<double, -1, 1>::Constant(sigma_beta_a_z_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      sigma_beta_a_z = in__.template read_constrain_lb<
                         Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                         0, lp__, sigma_beta_a_z_1dim__);
      Eigen::Matrix<double, -1, 1> sigma_beta_a_plfast =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      sigma_beta_a_plfast = in__.template read_constrain_lb<
                              Eigen::Matrix<local_scalar_t__, -1, 1>, 
                              jacobian__>(0, lp__, 2);
      Eigen::Matrix<double, -1, 1> sigma_beta_a_plmid =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      sigma_beta_a_plmid = in__.template read_constrain_lb<
                             Eigen::Matrix<local_scalar_t__, -1, 1>, 
                             jacobian__>(0, lp__, 2);
      Eigen::Matrix<double, -1, 1> sigma_beta_a_plslow =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      sigma_beta_a_plslow = in__.template read_constrain_lb<
                              Eigen::Matrix<local_scalar_t__, -1, 1>, 
                              jacobian__>(0, lp__, 2);
      double gamma_a_zfast_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      gamma_a_zfast_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_a_zfast_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      gamma_a_zfast_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      double gamma_a_zslow_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      gamma_a_zslow_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_a_zslow_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      gamma_a_zslow_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      double gamma_a_plfast_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 21;
      gamma_a_plfast_sd = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_a_plfast_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      gamma_a_plfast_raw = in__.template read<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>(
                             N_videolevel_features);
      double gamma_a_plmid_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      gamma_a_plmid_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_a_plmid_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 24;
      gamma_a_plmid_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      double gamma_a_plslow_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      gamma_a_plslow_sd = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_a_plslow_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 26;
      gamma_a_plslow_raw = in__.template read<
                             Eigen::Matrix<local_scalar_t__, -1, 1>>(
                             N_videolevel_features);
      Eigen::Matrix<double, -1, 1> beta_a_z_mean =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_z_mean_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_z_sd =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_z_sd_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plslow_mean =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plslow_sd =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plmid_mean =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plmid_sd =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plfast_mean =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plfast_sd =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_z =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_z_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plfast =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plmid =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_plslow =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_z =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(beta_av_z_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plfast =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plmid =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plslow =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      double gamma_a_zfast_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_a_zfast =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      double gamma_a_zslow_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_a_zslow =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      double gamma_a_plfast_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_a_plfast =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      double gamma_a_plslow_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_a_plslow =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      double gamma_a_plmid_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_a_plmid =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(L_z);
      out__.write(L_plfast);
      out__.write(L_plmid);
      out__.write(L_plslow);
      out__.write(beta_a_z_raw);
      out__.write(beta_a_plfast_raw);
      out__.write(beta_a_plmid_raw);
      out__.write(beta_a_plslow_raw);
      for (int sym1__ = 1; sym1__ <= beta_av_z_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          out__.write(beta_av_z_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          out__.write(beta_av_plfast_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          out__.write(beta_av_plmid_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          out__.write(beta_av_plslow_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma_beta_a_z);
      out__.write(sigma_beta_a_plfast);
      out__.write(sigma_beta_a_plmid);
      out__.write(sigma_beta_a_plslow);
      out__.write(gamma_a_zfast_sd);
      out__.write(gamma_a_zfast_raw);
      out__.write(gamma_a_zslow_sd);
      out__.write(gamma_a_zslow_raw);
      out__.write(gamma_a_plfast_sd);
      out__.write(gamma_a_plfast_raw);
      out__.write(gamma_a_plmid_sd);
      out__.write(gamma_a_plmid_raw);
      out__.write(gamma_a_plslow_sd);
      out__.write(gamma_a_plslow_raw);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 27;
      stan::model::assign(beta_a_z_mean,
        stan::math::rep_vector(0, (2 + (2 * N_cascadelevel_features))),
        "assigning variable beta_a_z_mean");
      current_statement__ = 53;
      stan::model::assign(beta_a_z_mean, -2,
        "assigning variable beta_a_z_mean", stan::model::index_uni(1));
      current_statement__ = 54;
      stan::model::assign(beta_a_z_mean, -2,
        "assigning variable beta_a_z_mean", stan::model::index_uni((2 +
                                                                    N_cascadelevel_features)));
      current_statement__ = 28;
      stan::model::assign(beta_a_z_sd,
        stan::math::rep_vector(0.1, (2 + (2 * N_cascadelevel_features))),
        "assigning variable beta_a_z_sd");
      current_statement__ = 55;
      stan::model::assign(beta_a_z_sd, 1,
        "assigning variable beta_a_z_sd", stan::model::index_uni(1));
      current_statement__ = 56;
      stan::model::assign(beta_a_z_sd, 1,
        "assigning variable beta_a_z_sd", stan::model::index_uni((2 +
                                                                   N_cascadelevel_features)));
      current_statement__ = 29;
      stan::model::assign(beta_a_plslow_mean, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plslow_mean");
      current_statement__ = 57;
      stan::model::assign(beta_a_plslow_mean, 4,
        "assigning variable beta_a_plslow_mean", stan::model::index_uni(1));
      current_statement__ = 58;
      stan::model::assign(beta_a_plslow_mean, 4.805,
        "assigning variable beta_a_plslow_mean", stan::model::index_uni(2));
      current_statement__ = 30;
      stan::model::assign(beta_a_plslow_sd, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plslow_sd");
      current_statement__ = 59;
      stan::model::assign(beta_a_plslow_sd, 0.5,
        "assigning variable beta_a_plslow_sd", stan::model::index_uni(1));
      current_statement__ = 60;
      stan::model::assign(beta_a_plslow_sd, 0.5,
        "assigning variable beta_a_plslow_sd", stan::model::index_uni(2));
      current_statement__ = 31;
      stan::model::assign(beta_a_plmid_mean, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plmid_mean");
      current_statement__ = 61;
      stan::model::assign(beta_a_plmid_mean, -0.41,
        "assigning variable beta_a_plmid_mean", stan::model::index_uni(1));
      current_statement__ = 62;
      stan::model::assign(beta_a_plmid_mean, -1.37,
        "assigning variable beta_a_plmid_mean", stan::model::index_uni(2));
      current_statement__ = 32;
      stan::model::assign(beta_a_plmid_sd, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plmid_sd");
      current_statement__ = 63;
      stan::model::assign(beta_a_plmid_sd, 0.5,
        "assigning variable beta_a_plmid_sd", stan::model::index_uni(1));
      current_statement__ = 64;
      stan::model::assign(beta_a_plmid_sd, 1,
        "assigning variable beta_a_plmid_sd", stan::model::index_uni(2));
      current_statement__ = 33;
      stan::model::assign(beta_a_plfast_mean, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plfast_mean");
      current_statement__ = 65;
      stan::model::assign(beta_a_plfast_mean, 4,
        "assigning variable beta_a_plfast_mean", stan::model::index_uni(1));
      current_statement__ = 66;
      stan::model::assign(beta_a_plfast_mean, 1,
        "assigning variable beta_a_plfast_mean", stan::model::index_uni(2));
      current_statement__ = 34;
      stan::model::assign(beta_a_plfast_sd, stan::math::rep_vector(0, 2),
        "assigning variable beta_a_plfast_sd");
      current_statement__ = 67;
      stan::model::assign(beta_a_plfast_sd, 0.5,
        "assigning variable beta_a_plfast_sd", stan::model::index_uni(1));
      current_statement__ = 68;
      stan::model::assign(beta_a_plfast_sd, 0.5,
        "assigning variable beta_a_plfast_sd", stan::model::index_uni(2));
      current_statement__ = 35;
      stan::model::assign(beta_a_z,
        stan::math::add(beta_a_z_mean,
          stan::math::elt_multiply(beta_a_z_sd, beta_a_z_raw)),
        "assigning variable beta_a_z");
      current_statement__ = 36;
      stan::model::assign(beta_a_plfast,
        stan::math::add(beta_a_plfast_mean,
          stan::math::elt_multiply(beta_a_plfast_sd, beta_a_plfast_raw)),
        "assigning variable beta_a_plfast");
      current_statement__ = 37;
      stan::model::assign(beta_a_plmid,
        stan::math::add(beta_a_plmid_mean,
          stan::math::elt_multiply(beta_a_plmid_sd, beta_a_plmid_raw)),
        "assigning variable beta_a_plmid");
      current_statement__ = 38;
      stan::model::assign(beta_a_plslow,
        stan::math::add(beta_a_plslow_mean,
          stan::math::elt_multiply(beta_a_plslow_sd, beta_a_plslow_raw)),
        "assigning variable beta_a_plslow");
      current_statement__ = 74;
      for (int v = 1; v <= V_train; ++v) {
        current_statement__ = 69;
        stan::model::assign(beta_av_z,
          stan::math::add(beta_a_z,
            stan::math::elt_multiply(sigma_beta_a_z,
              stan::math::multiply(L_z,
                stan::model::rvalue(beta_av_z_raw, "beta_av_z_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_z", stan::model::index_uni(v));
        current_statement__ = 70;
        stan::model::assign(beta_av_plfast,
          stan::math::add(beta_a_plfast,
            stan::math::elt_multiply(sigma_beta_a_plfast,
              stan::math::multiply(L_plfast,
                stan::model::rvalue(beta_av_plfast_raw, "beta_av_plfast_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_plfast", stan::model::index_uni(v));
        current_statement__ = 71;
        stan::model::assign(beta_av_plmid,
          stan::math::add(beta_a_plmid,
            stan::math::elt_multiply(sigma_beta_a_plmid,
              stan::math::multiply(L_plmid,
                stan::model::rvalue(beta_av_plmid_raw, "beta_av_plmid_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_plmid", stan::model::index_uni(v));
        current_statement__ = 72;
        stan::model::assign(beta_av_plslow,
          stan::math::add(beta_a_plslow,
            stan::math::elt_multiply(sigma_beta_a_plslow,
              stan::math::multiply(L_plslow,
                stan::model::rvalue(beta_av_plslow_raw, "beta_av_plslow_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av_plslow", stan::model::index_uni(v));
      }
      current_statement__ = 43;
      gamma_a_zfast_mean = 0;
      current_statement__ = 44;
      stan::model::assign(gamma_a_zfast,
        stan::math::add(gamma_a_zfast_mean,
          stan::math::multiply(gamma_a_zfast_sd, gamma_a_zfast_raw)),
        "assigning variable gamma_a_zfast");
      current_statement__ = 45;
      gamma_a_zslow_mean = 0;
      current_statement__ = 46;
      stan::model::assign(gamma_a_zslow,
        stan::math::add(gamma_a_zslow_mean,
          stan::math::multiply(gamma_a_zslow_sd, gamma_a_zslow_raw)),
        "assigning variable gamma_a_zslow");
      current_statement__ = 47;
      gamma_a_plfast_mean = 0;
      current_statement__ = 48;
      stan::model::assign(gamma_a_plfast,
        stan::math::add(gamma_a_plfast_mean,
          stan::math::multiply(gamma_a_plfast_sd, gamma_a_plfast_raw)),
        "assigning variable gamma_a_plfast");
      current_statement__ = 49;
      gamma_a_plslow_mean = 0;
      current_statement__ = 50;
      stan::model::assign(gamma_a_plslow,
        stan::math::add(gamma_a_plslow_mean,
          stan::math::multiply(gamma_a_plslow_sd, gamma_a_plslow_raw)),
        "assigning variable gamma_a_plslow");
      current_statement__ = 51;
      gamma_a_plmid_mean = 0;
      current_statement__ = 52;
      stan::model::assign(gamma_a_plmid,
        stan::math::add(gamma_a_plmid_mean,
          stan::math::multiply(gamma_a_plmid_sd, gamma_a_plmid_raw)),
        "assigning variable gamma_a_plmid");
      if (emit_transformed_parameters__) {
        out__.write(beta_a_z_mean);
        out__.write(beta_a_z_sd);
        out__.write(beta_a_plslow_mean);
        out__.write(beta_a_plslow_sd);
        out__.write(beta_a_plmid_mean);
        out__.write(beta_a_plmid_sd);
        out__.write(beta_a_plfast_mean);
        out__.write(beta_a_plfast_sd);
        out__.write(beta_a_z);
        out__.write(beta_a_plfast);
        out__.write(beta_a_plmid);
        out__.write(beta_a_plslow);
        for (int sym1__ = 1; sym1__ <= beta_av_z_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            out__.write(beta_av_z[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            out__.write(beta_av_plfast[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            out__.write(beta_av_plmid[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            out__.write(beta_av_plslow[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(gamma_a_zfast_mean);
        out__.write(gamma_a_zfast);
        out__.write(gamma_a_zslow_mean);
        out__.write(gamma_a_zslow);
        out__.write(gamma_a_plfast_mean);
        out__.write(gamma_a_plfast);
        out__.write(gamma_a_plslow_mean);
        out__.write(gamma_a_plslow);
        out__.write(gamma_a_plmid_mean);
        out__.write(gamma_a_plmid);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int pos_C = std::numeric_limits<int>::min();
      current_statement__ = 75;
      pos_C = 1;
      int pos_E = std::numeric_limits<int>::min();
      current_statement__ = 76;
      pos_E = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_z_holdout =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_holdout, 
           Eigen::Matrix<double, -1, 1>::Constant(beta_av_z_holdout_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plslow_holdout =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_holdout, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plfast_holdout =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_holdout, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_plmid_holdout =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_holdout, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> Omega_beta_z =
         Eigen::Matrix<double, -1, -1>::Constant(Omega_beta_z_1dim__,
           Omega_beta_z_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 81;
      stan::model::assign(Omega_beta_z,
        stan::math::multiply(L_z, stan::math::transpose(L_z)),
        "assigning variable Omega_beta_z");
      Eigen::Matrix<double, -1, -1> Omega_beta_plfast =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 82;
      stan::model::assign(Omega_beta_plfast,
        stan::math::multiply(L_plfast, stan::math::transpose(L_plfast)),
        "assigning variable Omega_beta_plfast");
      Eigen::Matrix<double, -1, -1> Omega_beta_plmid =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 83;
      stan::model::assign(Omega_beta_plmid,
        stan::math::multiply(L_plmid, stan::math::transpose(L_plmid)),
        "assigning variable Omega_beta_plmid");
      Eigen::Matrix<double, -1, -1> Omega_beta_plslow =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 84;
      stan::model::assign(Omega_beta_plslow,
        stan::math::multiply(L_plslow, stan::math::transpose(L_plslow)),
        "assigning variable Omega_beta_plslow");
      Eigen::Matrix<double, -1, -1> covariance_beta_z =
         Eigen::Matrix<double, -1, -1>::Constant(covariance_beta_z_1dim__,
           covariance_beta_z_2dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 85;
      stan::model::assign(covariance_beta_z,
        stan::math::quad_form_diag(Omega_beta_z, sigma_beta_a_z),
        "assigning variable covariance_beta_z");
      Eigen::Matrix<double, -1, -1> covariance_beta_plslow =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 86;
      stan::model::assign(covariance_beta_plslow,
        stan::math::quad_form_diag(Omega_beta_plslow, sigma_beta_a_plslow),
        "assigning variable covariance_beta_plslow");
      Eigen::Matrix<double, -1, -1> covariance_beta_plfast =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 87;
      stan::model::assign(covariance_beta_plfast,
        stan::math::quad_form_diag(Omega_beta_plfast, sigma_beta_a_plfast),
        "assigning variable covariance_beta_plfast");
      Eigen::Matrix<double, -1, -1> covariance_beta_plmid =
         Eigen::Matrix<double, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 88;
      stan::model::assign(covariance_beta_plmid,
        stan::math::quad_form_diag(Omega_beta_plmid, sigma_beta_a_plmid),
        "assigning variable covariance_beta_plmid");
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(V_holdout,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 89;
      stan::model::assign(log_lik, stan::math::rep_vector(0, V_holdout),
        "assigning variable log_lik");
      Eigen::Matrix<double, -1, 1> log_lik_per_cascade =
         Eigen::Matrix<double, -1, 1>::Constant(C_holdout,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 90;
      stan::model::assign(log_lik_per_cascade,
        stan::math::rep_vector(0, C_holdout),
        "assigning variable log_lik_per_cascade");
      int pos_C_flat = std::numeric_limits<int>::min();
      current_statement__ = 91;
      pos_C_flat = 1;
      current_statement__ = 145;
      for (int v = 1; v <= V_holdout; ++v) {
        current_statement__ = 92;
        stan::model::assign(beta_av_z_holdout,
          stan::math::multi_normal_rng(beta_a_z, covariance_beta_z,
            base_rng__),
          "assigning variable beta_av_z_holdout", stan::model::index_uni(v));
        current_statement__ = 93;
        stan::model::assign(beta_av_plslow_holdout,
          stan::math::multi_normal_rng(beta_a_plslow, covariance_beta_plslow,
            base_rng__),
          "assigning variable beta_av_plslow_holdout", stan::model::index_uni(v));
        current_statement__ = 94;
        stan::model::assign(beta_av_plfast_holdout,
          stan::math::multi_normal_rng(beta_a_plfast, covariance_beta_plfast,
            base_rng__),
          "assigning variable beta_av_plfast_holdout", stan::model::index_uni(v));
        current_statement__ = 95;
        stan::model::assign(beta_av_plmid_holdout,
          stan::math::multi_normal_rng(beta_a_plmid, covariance_beta_plmid,
            base_rng__),
          "assigning variable beta_av_plmid_holdout", stan::model::index_uni(v));
        int C_of_v = std::numeric_limits<int>::min();
        current_statement__ = 96;
        C_of_v = stan::model::rvalue(N_cascades_per_video_holdout,
                   "N_cascades_per_video_holdout", stan::model::index_uni(v));
        current_statement__ = 97;
        stan::math::validate_non_negative_index("cascade_sizes_holdout",
                                                "C_of_v", C_of_v);
        std::vector<int> cascade_sizes_holdout =
           std::vector<int>(C_of_v, std::numeric_limits<int>::min());
        current_statement__ = 98;
        stan::model::assign(cascade_sizes_holdout,
          stan::math::to_array_1d(
            stan::model::rvalue(N_cascadesize_per_cascade_holdout,
              "N_cascadesize_per_cascade_holdout",
              stan::model::index_min_max(pos_C, ((pos_C + C_of_v) - 1)))),
          "assigning variable cascade_sizes_holdout");
        current_statement__ = 99;
        stan::math::validate_non_negative_index("y_av_holdout",
                                                "N_videolevel_features",
                                                N_videolevel_features);
        Eigen::Matrix<double, -1, 1> y_av_holdout =
           Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 100;
        stan::model::assign(y_av_holdout,
          stan::model::rvalue(videolevel_features_holdout,
            "videolevel_features_holdout",
            stan::model::index_min_max((1 +
                                         ((v - 1) * N_videolevel_features)), 
              (v * N_videolevel_features))),
          "assigning variable y_av_holdout");
        double gamma_effect_on_slow_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 101;
        gamma_effect_on_slow_holdout = stan::math::dot_product(gamma_a_zslow,
                                         y_av_holdout);
        double gamma_effect_on_fast_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 102;
        gamma_effect_on_fast_holdout = stan::math::dot_product(gamma_a_zfast,
                                         y_av_holdout);
        double gamma_effect_on_plslow_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 103;
        gamma_effect_on_plslow_holdout = stan::math::dot_product(
                                           gamma_a_plslow, y_av_holdout);
        double gamma_effect_on_plfast_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 104;
        gamma_effect_on_plfast_holdout = stan::math::dot_product(
                                           gamma_a_plfast, y_av_holdout);
        double gamma_effect_on_plmid_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 105;
        gamma_effect_on_plmid_holdout = stan::math::dot_product(
                                          gamma_a_plmid, y_av_holdout);
        double log_theta_plslow_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 106;
        log_theta_plslow_avc_holdout = (gamma_effect_on_plslow_holdout +
                                         stan::model::rvalue(
                                           stan::model::rvalue(beta_av_plslow_holdout, "beta_av_plslow_holdout",
  stan::model::index_uni(v)),
                                           "beta_av_plslow_holdout[v]",
                                           stan::model::index_uni(1)));
        double log_theta_plfast_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 107;
        log_theta_plfast_avc_holdout = (gamma_effect_on_plfast_holdout +
                                         stan::model::rvalue(
                                           stan::model::rvalue(beta_av_plfast_holdout, "beta_av_plfast_holdout",
  stan::model::index_uni(v)),
                                           "beta_av_plfast_holdout[v]",
                                           stan::model::index_uni(1)));
        double log_theta_plmid_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 108;
        log_theta_plmid_avc_holdout = (gamma_effect_on_plmid_holdout +
                                        stan::model::rvalue(
                                          stan::model::rvalue(beta_av_plmid_holdout, "beta_av_plmid_holdout",
  stan::model::index_uni(v)),
                                          "beta_av_plmid_holdout[v]",
                                          stan::model::index_uni(1)));
        double log_cutoff_plslow_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 109;
        log_cutoff_plslow_avc_holdout = stan::model::rvalue(
                                          stan::model::rvalue(beta_av_plslow_holdout, "beta_av_plslow_holdout",
  stan::model::index_uni(v)),
                                          "beta_av_plslow_holdout[v]",
                                          stan::model::index_uni(2));
        double log_cutoff_plfast_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 110;
        log_cutoff_plfast_avc_holdout = stan::model::rvalue(
                                          stan::model::rvalue(beta_av_plfast_holdout, "beta_av_plfast_holdout",
  stan::model::index_uni(v)),
                                          "beta_av_plfast_holdout[v]",
                                          stan::model::index_uni(2));
        double log_cutoff_plmid_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 111;
        log_cutoff_plmid_avc_holdout = stan::model::rvalue(
                                         stan::model::rvalue(beta_av_plmid_holdout, "beta_av_plmid_holdout",
  stan::model::index_uni(v)),
                                         "beta_av_plmid_holdout[v]",
                                         stan::model::index_uni(2));
        double theta_plslow_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 112;
        theta_plslow_avc_holdout = stan::math::exp(
                                     log_theta_plslow_avc_holdout);
        double theta_plfast_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 113;
        theta_plfast_avc_holdout = stan::math::exp(
                                     log_theta_plfast_avc_holdout);
        double theta_plmid_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 114;
        theta_plmid_avc_holdout = stan::math::exp(
                                    log_theta_plmid_avc_holdout);
        double cutoff_plslow_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 115;
        cutoff_plslow_avc_holdout = stan::math::exp(
                                      log_cutoff_plslow_avc_holdout);
        double cutoff_plfast_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 116;
        cutoff_plfast_avc_holdout = stan::math::exp(
                                      log_cutoff_plfast_avc_holdout);
        double cutoff_plmid_avc_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 117;
        cutoff_plmid_avc_holdout = stan::math::exp(
                                     log_cutoff_plmid_avc_holdout);
        current_statement__ = 142;
        for (int k = 1; k <= C_of_v; ++k) {
          int G = std::numeric_limits<int>::min();
          current_statement__ = 118;
          G = stan::model::rvalue(cascade_sizes_holdout,
                "cascade_sizes_holdout", stan::model::index_uni(k));
          current_statement__ = 119;
          stan::math::validate_non_negative_index("x_avc_holdout",
                                                  "N_cascadelevel_features + 1",
                                                  (N_cascadelevel_features +
                                                    1));
          Eigen::Matrix<double, -1, 1> x_avc_holdout =
             Eigen::Matrix<double, -1, 1>::Constant(
               (N_cascadelevel_features + 1),
               std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 120;
          stan::model::assign(x_avc_holdout,
            stan::math::append_row(1,
              stan::model::rvalue(cascadelevel_features_holdout,
                "cascadelevel_features_holdout",
                stan::model::index_min_max((((((pos_C + k) - 1) - 1) *
                                              N_cascadelevel_features) + 1), 
                  (((pos_C + k) - 1) * N_cascadelevel_features)))),
            "assigning variable x_avc_holdout");
          Eigen::Matrix<double, -1, 1> z_to_raise =
             Eigen::Matrix<double, -1, 1>::Constant(3,
               std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 121;
          stan::model::assign(z_to_raise, stan::math::rep_vector(0, 3),
            "assigning variable z_to_raise");
          current_statement__ = 122;
          stan::model::assign(z_to_raise,
            (gamma_effect_on_slow_holdout +
              stan::math::dot_product(
                stan::model::rvalue(
                  stan::model::rvalue(beta_av_z_holdout, "beta_av_z_holdout",
  stan::model::index_uni(v)),
                  "beta_av_z_holdout[v]",
                  stan::model::index_min_max(1, (1 + N_cascadelevel_features))),
                x_avc_holdout)),
            "assigning variable z_to_raise", stan::model::index_uni(2));
          current_statement__ = 123;
          stan::model::assign(z_to_raise,
            (gamma_effect_on_fast_holdout +
              stan::math::dot_product(
                stan::model::rvalue(
                  stan::model::rvalue(beta_av_z_holdout, "beta_av_z_holdout",
  stan::model::index_uni(v)),
                  "beta_av_z_holdout[v]",
                  stan::model::index_min_max((2 + N_cascadelevel_features), 
                    (2 + (2 * N_cascadelevel_features)))), x_avc_holdout)),
            "assigning variable z_to_raise", stan::model::index_uni(3));
          Eigen::Matrix<double, -1, 1> logz_avc_holdout =
             Eigen::Matrix<double, -1, 1>::Constant(3,
               std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 124;
          stan::model::assign(logz_avc_holdout,
            stan::math::log_softmax(z_to_raise),
            "assigning variable logz_avc_holdout");
          double log_plslow = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 125;
          log_plslow = 0;
          double log_plfast = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 126;
          log_plfast = 0;
          double log_plmid = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 127;
          log_plmid = 0;
          current_statement__ = 133;
          for (int i = 1; i <= (G - 1); ++i) {
            current_statement__ = 128;
            log_plslow = (log_plslow +
                           stan::math::log_sum_exp(
                             log_g_pl(
                               stan::model::rvalue(d_holdout, "d_holdout",
                                 stan::model::index_min_max(pos_E, ((pos_E +
                                                                    i) - 1))),
                               theta_plslow_avc_holdout,
                               cutoff_plslow_avc_holdout,
                               log_theta_plslow_avc_holdout,
                               log_cutoff_plslow_avc_holdout, pstream__)));
            current_statement__ = 129;
            log_plfast = (log_plfast +
                           stan::math::log_sum_exp(
                             log_g_pl(
                               stan::model::rvalue(d_holdout, "d_holdout",
                                 stan::model::index_min_max(pos_E, ((pos_E +
                                                                    i) - 1))),
                               theta_plfast_avc_holdout,
                               cutoff_plfast_avc_holdout,
                               log_theta_plfast_avc_holdout,
                               log_cutoff_plfast_avc_holdout, pstream__)));
            current_statement__ = 130;
            log_plmid = (log_plmid +
                          stan::math::log_sum_exp(
                            log_g_pl(
                              stan::model::rvalue(d_holdout, "d_holdout",
                                stan::model::index_min_max(pos_E, ((pos_E +
                                                                    i) - 1))),
                              theta_plmid_avc_holdout,
                              cutoff_plmid_avc_holdout,
                              log_theta_plmid_avc_holdout,
                              cutoff_plmid_avc_holdout, pstream__)));
            current_statement__ = 131;
            pos_E = (pos_E + i);
          }
          Eigen::Matrix<double, -1, 1> log_l_holdout =
             Eigen::Matrix<double, -1, 1>::Constant(3,
               std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 135;
          stan::model::assign(log_l_holdout,
            (stan::model::rvalue(logz_avc_holdout, "logz_avc_holdout",
               stan::model::index_uni(1)) + log_plmid),
            "assigning variable log_l_holdout", stan::model::index_uni(1));
          current_statement__ = 136;
          stan::model::assign(log_l_holdout,
            (stan::model::rvalue(logz_avc_holdout, "logz_avc_holdout",
               stan::model::index_uni(2)) + log_plslow),
            "assigning variable log_l_holdout", stan::model::index_uni(2));
          current_statement__ = 137;
          stan::model::assign(log_l_holdout,
            (stan::model::rvalue(logz_avc_holdout, "logz_avc_holdout",
               stan::model::index_uni(3)) + log_plfast),
            "assigning variable log_l_holdout", stan::model::index_uni(3));
          current_statement__ = 138;
          stan::model::assign(log_lik_per_cascade,
            stan::math::log_sum_exp(log_l_holdout),
            "assigning variable log_lik_per_cascade", stan::model::index_uni(pos_C_flat));
          current_statement__ = 139;
          stan::model::assign(log_lik,
            (stan::model::rvalue(log_lik, "log_lik",
               stan::model::index_uni(v)) +
              stan::model::rvalue(log_lik_per_cascade, "log_lik_per_cascade",
                stan::model::index_uni(pos_C_flat))),
            "assigning variable log_lik", stan::model::index_uni(v));
          current_statement__ = 140;
          pos_C_flat = (pos_C_flat + 1);
        }
        current_statement__ = 143;
        pos_C = (pos_C + C_of_v);
      }
      out__.write(pos_C);
      out__.write(pos_E);
      for (int sym1__ = 1; sym1__ <= beta_av_z_holdout_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
          out__.write(beta_av_z_holdout[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
          out__.write(beta_av_plslow_holdout[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
          out__.write(beta_av_plfast_holdout[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
          out__.write(beta_av_plmid_holdout[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(Omega_beta_z);
      out__.write(Omega_beta_plfast);
      out__.write(Omega_beta_plmid);
      out__.write(Omega_beta_plslow);
      out__.write(covariance_beta_z);
      out__.write(covariance_beta_plslow);
      out__.write(covariance_beta_plfast);
      out__.write(covariance_beta_plmid);
      out__.write(log_lik);
      out__.write(log_lik_per_cascade);
      out__.write(pos_C_flat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, -1> L_z =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(L_z_1dim__,
           L_z_2dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L_z_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L_z_1dim__; ++sym2__) {
          stan::model::assign(L_z, in__.read<local_scalar_t__>(),
            "assigning variable L_z", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_z);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_plfast =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          stan::model::assign(L_plfast, in__.read<local_scalar_t__>(),
            "assigning variable L_plfast", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_plfast);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_plmid =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          stan::model::assign(L_plmid, in__.read<local_scalar_t__>(),
            "assigning variable L_plmid", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_plmid);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_plslow =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          stan::model::assign(L_plslow, in__.read<local_scalar_t__>(),
            "assigning variable L_plslow", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_plslow);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_z_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           beta_a_z_raw_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= beta_a_z_raw_1dim__; ++sym1__) {
        stan::model::assign(beta_a_z_raw, in__.read<local_scalar_t__>(),
          "assigning variable beta_a_z_raw", stan::model::index_uni(sym1__));
      }
      out__.write(beta_a_z_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plfast_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(beta_a_plfast_raw, in__.read<local_scalar_t__>(),
          "assigning variable beta_a_plfast_raw", stan::model::index_uni(sym1__));
      }
      out__.write(beta_a_plfast_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plmid_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(beta_a_plmid_raw, in__.read<local_scalar_t__>(),
          "assigning variable beta_a_plmid_raw", stan::model::index_uni(sym1__));
      }
      out__.write(beta_a_plmid_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_plslow_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(beta_a_plslow_raw, in__.read<local_scalar_t__>(),
          "assigning variable beta_a_plslow_raw", stan::model::index_uni(sym1__));
      }
      out__.write(beta_a_plslow_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_z_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
             beta_av_z_raw_2dim__, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= beta_av_z_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          stan::model::assign(beta_av_z_raw, in__.read<local_scalar_t__>(),
            "assigning variable beta_av_z_raw", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lub(-5, 5, beta_av_z_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plfast_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          stan::model::assign(beta_av_plfast_raw,
            in__.read<local_scalar_t__>(),
            "assigning variable beta_av_plfast_raw", stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta_av_plfast_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plmid_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          stan::model::assign(beta_av_plmid_raw,
            in__.read<local_scalar_t__>(),
            "assigning variable beta_av_plmid_raw", stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta_av_plmid_raw);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_plslow_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          stan::model::assign(beta_av_plslow_raw,
            in__.read<local_scalar_t__>(),
            "assigning variable beta_av_plslow_raw", stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta_av_plslow_raw);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_z =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           sigma_beta_a_z_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= sigma_beta_a_z_1dim__; ++sym1__) {
        stan::model::assign(sigma_beta_a_z, in__.read<local_scalar_t__>(),
          "assigning variable sigma_beta_a_z", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_beta_a_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_plfast =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(sigma_beta_a_plfast,
          in__.read<local_scalar_t__>(),
          "assigning variable sigma_beta_a_plfast", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_beta_a_plfast);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_plmid =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(sigma_beta_a_plmid,
          in__.read<local_scalar_t__>(),
          "assigning variable sigma_beta_a_plmid", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_beta_a_plmid);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a_plslow =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(sigma_beta_a_plslow,
          in__.read<local_scalar_t__>(),
          "assigning variable sigma_beta_a_plslow", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_beta_a_plslow);
      local_scalar_t__ gamma_a_zfast_sd = DUMMY_VAR__;
      gamma_a_zfast_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_a_zfast_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_zfast_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_a_zfast_raw, in__.read<local_scalar_t__>(),
          "assigning variable gamma_a_zfast_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_a_zfast_raw);
      local_scalar_t__ gamma_a_zslow_sd = DUMMY_VAR__;
      gamma_a_zslow_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_a_zslow_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_zslow_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_a_zslow_raw, in__.read<local_scalar_t__>(),
          "assigning variable gamma_a_zslow_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_a_zslow_raw);
      local_scalar_t__ gamma_a_plfast_sd = DUMMY_VAR__;
      gamma_a_plfast_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_a_plfast_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plfast_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_a_plfast_raw,
          in__.read<local_scalar_t__>(),
          "assigning variable gamma_a_plfast_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_a_plfast_raw);
      local_scalar_t__ gamma_a_plmid_sd = DUMMY_VAR__;
      gamma_a_plmid_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_a_plmid_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plmid_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_a_plmid_raw, in__.read<local_scalar_t__>(),
          "assigning variable gamma_a_plmid_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_a_plmid_raw);
      local_scalar_t__ gamma_a_plslow_sd = DUMMY_VAR__;
      gamma_a_plslow_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_a_plslow_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_plslow_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_a_plslow_raw,
          in__.read<local_scalar_t__>(),
          "assigning variable gamma_a_plslow_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_a_plslow_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"L_z", "L_plfast", "L_plmid",
      "L_plslow", "beta_a_z_raw", "beta_a_plfast_raw", "beta_a_plmid_raw",
      "beta_a_plslow_raw", "beta_av_z_raw", "beta_av_plfast_raw",
      "beta_av_plmid_raw", "beta_av_plslow_raw", "sigma_beta_a_z",
      "sigma_beta_a_plfast", "sigma_beta_a_plmid", "sigma_beta_a_plslow",
      "gamma_a_zfast_sd", "gamma_a_zfast_raw", "gamma_a_zslow_sd",
      "gamma_a_zslow_raw", "gamma_a_plfast_sd", "gamma_a_plfast_raw",
      "gamma_a_plmid_sd", "gamma_a_plmid_raw", "gamma_a_plslow_sd",
      "gamma_a_plslow_raw", "beta_a_z_mean", "beta_a_z_sd",
      "beta_a_plslow_mean", "beta_a_plslow_sd", "beta_a_plmid_mean",
      "beta_a_plmid_sd", "beta_a_plfast_mean", "beta_a_plfast_sd",
      "beta_a_z", "beta_a_plfast", "beta_a_plmid", "beta_a_plslow",
      "beta_av_z", "beta_av_plfast", "beta_av_plmid", "beta_av_plslow",
      "gamma_a_zfast_mean", "gamma_a_zfast", "gamma_a_zslow_mean",
      "gamma_a_zslow", "gamma_a_plfast_mean", "gamma_a_plfast",
      "gamma_a_plslow_mean", "gamma_a_plslow", "gamma_a_plmid_mean",
      "gamma_a_plmid", "pos_C", "pos_E", "beta_av_z_holdout",
      "beta_av_plslow_holdout", "beta_av_plfast_holdout",
      "beta_av_plmid_holdout", "Omega_beta_z", "Omega_beta_plfast",
      "Omega_beta_plmid", "Omega_beta_plslow", "covariance_beta_z",
      "covariance_beta_plslow", "covariance_beta_plfast",
      "covariance_beta_plmid", "log_lik", "log_lik_per_cascade",
      "pos_C_flat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(L_z_1dim__)
                                                                   ,
                                                                   static_cast<size_t>(L_z_2dim__)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(beta_a_z_raw_1dim__)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(beta_av_z_raw_2dim__)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(sigma_beta_a_z_1dim__)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{static_cast<size_t>(beta_a_z_mean_1dim__)},
      std::vector<size_t>{static_cast<size_t>(beta_a_z_sd_1dim__)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(beta_a_z_1dim__)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(beta_av_z_2dim__)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(V_holdout),
                          static_cast<size_t>(beta_av_z_holdout_2dim__)},
      std::vector<size_t>{static_cast<size_t>(V_holdout),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_holdout),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_holdout),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(Omega_beta_z_1dim__),
                          static_cast<size_t>(Omega_beta_z_2dim__)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(covariance_beta_z_1dim__),
                          static_cast<size_t>(covariance_beta_z_2dim__)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(V_holdout)},
      std::vector<size_t>{static_cast<size_t>(C_holdout)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= L_z_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= L_z_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= beta_a_z_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_z_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_plfast_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_plmid_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_plslow_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= beta_av_z_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_z_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_plfast_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_plmid_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_plslow_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= sigma_beta_a_z_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_plfast" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_plmid" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_plslow" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_zfast_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_zfast_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_zslow_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_zslow_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_plfast_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_plfast_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_plmid_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_plmid_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_plslow_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_plslow_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_a_z_mean_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_z_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_z_sd_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_z_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plslow_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plslow_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plmid_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plmid_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plfast_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plfast_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_z_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_z" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plfast" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plmid" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plslow" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_av_z_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_zfast_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_zfast" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_zslow_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_zslow" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_plfast_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_plfast" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_plslow_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_plslow" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_plmid_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_plmid" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "pos_C");
      param_names__.emplace_back(std::string() + "pos_E");
      for (int sym1__ = 1; sym1__ <= beta_av_z_holdout_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_z_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plslow_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plfast_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plmid_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Omega_beta_z_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Omega_beta_z_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= covariance_beta_z_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= covariance_beta_z_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_per_cascade" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "pos_C_flat");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= ((L_z_1dim__ * (L_z_1dim__ - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_plfast" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_plmid" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_plslow" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= beta_a_z_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_z_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_plfast_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_plmid_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_plslow_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= beta_av_z_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_z_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_plfast_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_plmid_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_plslow_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= sigma_beta_a_z_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_plfast" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_plmid" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a_plslow" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_zfast_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_zfast_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_zslow_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_zslow_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_plfast_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_plfast_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_plmid_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_plmid_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_plslow_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_plslow_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_a_z_mean_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_z_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_z_sd_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_z_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plslow_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plslow_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plmid_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plmid_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plfast_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plfast_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_z_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_z" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plfast" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plmid" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_plslow" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_av_z_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_zfast_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_zfast" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_zslow_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_zslow" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_plfast_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_plfast" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_plslow_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_plslow" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_plmid_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_plmid" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "pos_C");
      param_names__.emplace_back(std::string() + "pos_E");
      for (int sym1__ = 1; sym1__ <= beta_av_z_holdout_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_z_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plslow_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plfast_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_plmid_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Omega_beta_z_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Omega_beta_z_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= covariance_beta_z_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= covariance_beta_z_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_plslow" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_plfast" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta_plmid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_per_cascade" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "pos_C_flat");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"L_z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(L_z_1dim__) + ",\"cols\":" + std::to_string(L_z_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"L_plfast\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"L_plmid\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"L_plslow\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_z_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_plfast_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_plmid_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_plslow_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_av_z_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_z_raw_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"beta_av_plfast_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"beta_av_plmid_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"beta_av_plslow_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_beta_a_z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_zfast_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_zfast_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_zslow_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_zslow_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_plfast_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_plfast_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_plmid_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_plmid_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_plslow_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_plslow_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_z_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_mean_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_z_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_sd_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plslow_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plslow_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plmid_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plmid_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plfast_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plfast_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_z_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_plfast\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_plmid\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_plslow\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zfast_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zslow_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plfast_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plslow_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plmid_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pos_C\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"pos_E\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_z_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_z_holdout_2dim__) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_plslow_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_plfast_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_plmid_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Omega_beta_z_1dim__) + ",\"cols\":" + std::to_string(Omega_beta_z_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_plfast\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_plmid\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_plslow\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(covariance_beta_z_1dim__) + ",\"cols\":" + std::to_string(covariance_beta_z_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_plslow\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_plfast\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_plmid\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_per_cascade\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"pos_C_flat\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"L_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((L_z_1dim__ * (L_z_1dim__ - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"L_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((2 * (2 - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"L_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((2 * (2 - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"L_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((2 * (2 - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_z_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_plfast_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_plmid_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_plslow_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"beta_av_z_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_z_raw_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"beta_av_plfast_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"beta_av_plmid_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"beta_av_plslow_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_beta_a_z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_zfast_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_zfast_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_zslow_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_zslow_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_plfast_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_plfast_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_plmid_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_plmid_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_plslow_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_plslow_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_z_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_mean_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_z_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_sd_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plslow_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plslow_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plmid_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plmid_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plfast_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plfast_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_z_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_z_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_plfast\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_plmid\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av_plslow\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zfast_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zslow_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_zslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plfast_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plfast\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plslow_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plslow\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plmid_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_plmid\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pos_C\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"pos_E\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_z_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_z_holdout_2dim__) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_plslow_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_plfast_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_plmid_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Omega_beta_z_1dim__) + ",\"cols\":" + std::to_string(Omega_beta_z_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_plfast\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_plmid\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta_plslow\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(covariance_beta_z_1dim__) + ",\"cols\":" + std::to_string(covariance_beta_z_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_plslow\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_plfast\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta_plmid\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_per_cascade\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"pos_C_flat\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((((((((L_z_1dim__ * L_z_2dim__) + (2 * 2)) + (2 * 2)) +
                          (2 * 2)) + beta_a_z_raw_1dim__) + 2) + 2) + 2) +
                     (V_train * beta_av_z_raw_2dim__)) + (V_train * 2)) +
                   (V_train * 2)) + (V_train * 2)) + sigma_beta_a_z_1dim__) +
                2) + 2) + 2) + 1) + N_videolevel_features) + 1) +
          N_videolevel_features) + 1) + N_videolevel_features) + 1) +
      N_videolevel_features) + 1) + N_videolevel_features);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((((((((((((((((((((beta_a_z_mean_1dim__ + beta_a_z_sd_1dim__) + 2) +
                          2) + 2) + 2) + 2) + 2) + beta_a_z_1dim__) + 2) + 2)
                  + 2) + (V_train * beta_av_z_2dim__)) + (V_train * 2)) +
               (V_train * 2)) + (V_train * 2)) + 1) + N_videolevel_features)
           + 1) + N_videolevel_features) + 1) + N_videolevel_features) + 1) +
      N_videolevel_features) + 1) + N_videolevel_features);
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((((((((((1 + 1) + (V_holdout * beta_av_z_holdout_2dim__)) +
                 (V_holdout * 2)) + (V_holdout * 2)) + (V_holdout * 2)) +
              (Omega_beta_z_1dim__ * Omega_beta_z_2dim__)) + (2 * 2)) +
            (2 * 2)) + (2 * 2)) +
          (covariance_beta_z_1dim__ * covariance_beta_z_2dim__)) + (2 * 2)) +
        (2 * 2)) + (2 * 2)) + V_holdout) + C_holdout) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((((((((L_z_1dim__ * L_z_2dim__) + (2 * 2)) + (2 * 2)) +
                          (2 * 2)) + beta_a_z_raw_1dim__) + 2) + 2) + 2) +
                     (V_train * beta_av_z_raw_2dim__)) + (V_train * 2)) +
                   (V_train * 2)) + (V_train * 2)) + sigma_beta_a_z_1dim__) +
                2) + 2) + 2) + 1) + N_videolevel_features) + 1) +
          N_videolevel_features) + 1) + N_videolevel_features) + 1) +
      N_videolevel_features) + 1) + N_videolevel_features);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((((((((((((((((((((beta_a_z_mean_1dim__ + beta_a_z_sd_1dim__) + 2) +
                          2) + 2) + 2) + 2) + 2) + beta_a_z_1dim__) + 2) + 2)
                  + 2) + (V_train * beta_av_z_2dim__)) + (V_train * 2)) +
               (V_train * 2)) + (V_train * 2)) + 1) + N_videolevel_features)
           + 1) + N_videolevel_features) + 1) + N_videolevel_features) + 1) +
      N_videolevel_features) + 1) + N_videolevel_features);
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((((((((((1 + 1) + (V_holdout * beta_av_z_holdout_2dim__)) +
                 (V_holdout * 2)) + (V_holdout * 2)) + (V_holdout * 2)) +
              (Omega_beta_z_1dim__ * Omega_beta_z_2dim__)) + (2 * 2)) +
            (2 * 2)) + (2 * 2)) +
          (covariance_beta_z_1dim__ * covariance_beta_z_2dim__)) + (2 * 2)) +
        (2 * 2)) + (2 * 2)) + V_holdout) + C_holdout) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 26> names__{"L_z", "L_plfast",
      "L_plmid", "L_plslow", "beta_a_z_raw", "beta_a_plfast_raw",
      "beta_a_plmid_raw", "beta_a_plslow_raw", "beta_av_z_raw",
      "beta_av_plfast_raw", "beta_av_plmid_raw", "beta_av_plslow_raw",
      "sigma_beta_a_z", "sigma_beta_a_plfast", "sigma_beta_a_plmid",
      "sigma_beta_a_plslow", "gamma_a_zfast_sd", "gamma_a_zfast_raw",
      "gamma_a_zslow_sd", "gamma_a_zslow_raw", "gamma_a_plfast_sd",
      "gamma_a_plfast_raw", "gamma_a_plmid_sd", "gamma_a_plmid_raw",
      "gamma_a_plslow_sd", "gamma_a_plslow_raw"};
      const std::array<Eigen::Index, 26> constrain_param_sizes__{(L_z_1dim__ * L_z_2dim__)
       , (2 * 2), (2 * 2), (2 * 2), beta_a_z_raw_1dim__, 2, 2, 2,
       (V_train * beta_av_z_raw_2dim__), (V_train * 2), (V_train * 2),
       (V_train * 2), sigma_beta_a_z_1dim__, 2, 2, 2, 1,
       N_videolevel_features, 1, N_videolevel_features, 1,
       N_videolevel_features, 1, N_videolevel_features, 1,
       N_videolevel_features};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = theta_pl_z0xy_a0y_corr_threeclass_pl_model_namespace::theta_pl_z0xy_a0y_corr_threeclass_pl_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return theta_pl_z0xy_a0y_corr_threeclass_pl_model_namespace::profiles__;
}

#endif


