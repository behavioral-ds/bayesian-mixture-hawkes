
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace mixture_pl_0x43a0y_z0xy_sep_modified_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 148> locations_array__ = 
{" (found before start of program)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 32, column 4 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 33, column 4 to column 56)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 34, column 4 to column 62)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 35, column 4 to column 67)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 38, column 4 to column 35)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 39, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 41, column 4 to column 35)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 42, column 4 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 47, column 4 to column 95)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 52, column 4 to column 93)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 57, column 4 to column 85)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 59, column 4 to column 63)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 61, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 62, column 4 to column 104)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 64, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 65, column 4 to column 104)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 48, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 49, column 4 to column 23)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 50, column 4 to column 24)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 53, column 4 to column 23)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 54, column 4 to column 23)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 55, column 4 to column 23)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 68, column 8 to column 67)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 67, column 25 to line 69, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 67, column 4 to line 69, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 117, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 118, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 120, column 4 to column 73)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 122, column 4 to column 85)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 123, column 4 to column 124)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 125, column 4 to column 61)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 126, column 4 to column 61)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 127, column 4 to column 63)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 131, column 8 to column 71)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 133, column 8 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 134, column 15 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 134, column 8 to column 137)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 135, column 34 to column 40)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 135, column 8 to column 113)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 136, column 8 to column 117)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 137, column 8 to column 119)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 140, column 19 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 140, column 12 to column 105)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 141, column 12 to column 165)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 143, column 12 to column 92)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 144, column 12 to column 96)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 145, column 12 to column 168)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 146, column 12 to column 182)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 148, column 12 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 149, column 12 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 139, column 30 to line 150, column 9)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 139, column 8 to line 150, column 9)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 151, column 8 to column 89)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 153, column 8 to column 86)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 154, column 8 to column 24)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 129, column 27 to line 155, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 129, column 4 to line 155, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 74, column 4 to column 34)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 75, column 4 to column 34)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 76, column 4 to column 34)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 77, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 78, column 4 to column 29)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 79, column 4 to column 29)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 81, column 4 to column 39)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 82, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 84, column 4 to column 39)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 85, column 4 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 87, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 88, column 4 to column 18)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 91, column 8 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 92, column 15 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 92, column 8 to column 127)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 95, column 8 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 97, column 26 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 97, column 8 to column 90)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 99, column 8 to column 92)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 100, column 8 to column 95)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 104, column 19 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 104, column 12 to column 157)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 105, column 12 to column 125)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 107, column 12 to column 260)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 102, column 28 to line 108, column 8)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 102, column 8 to line 108, column 8)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 111, column 8 to column 84)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 112, column 8 to column 24)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 90, column 25 to line 113, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 90, column 4 to line 113, column 5)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 2, column 4 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 3, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 5, column 4 to column 25)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 6, column 4 to column 25)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 7, column 4 to column 25)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 8, column 35 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 8, column 4 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 9, column 40 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 9, column 4 to column 50)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 10, column 40 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 10, column 4 to column 49)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 11, column 20 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 11, column 4 to column 37)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 12, column 11 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 12, column 4 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 13, column 11 to column 42)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 13, column 4 to column 70)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 15, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 16, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 17, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 18, column 37 to column 46)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 18, column 4 to column 48)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 19, column 42 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 19, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 20, column 42 to column 51)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 20, column 4 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 21, column 20 to column 29)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 21, column 4 to column 41)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 22, column 11 to column 46)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 22, column 4 to column 78)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 23, column 11 to column 44)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 23, column 4 to column 74)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 25, column 4 to column 26)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 26, column 11 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 26, column 4 to column 27)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 27, column 11 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 27, column 4 to column 30)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 32, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 33, column 25 to column 52)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 34, column 20 to column 47)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 35, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 35, column 26 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 39, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 42, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 47, column 11 to column 38)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 52, column 11 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 57, column 11 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 59, column 10 to column 17)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 59, column 26 to column 53)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 62, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 65, column 11 to column 32)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 120, column 10 to column 19)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 120, column 28 to column 55)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 122, column 11 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 122, column 38 to column 63)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 123, column 11 to column 36)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 123, column 38 to column 63)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 125, column 11 to column 20)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 126, column 11 to column 20)",
 " (in '/g/data/gh47/pc3426/jobs/bayesian_mixture_rnix_yregexpt_x/stan_files/mixture-pl_0+a0y_z0xy-sep_modified.stan', line 127, column 11 to column 20)"};




class mixture_pl_0x43a0y_z0xy_sep_modified_model final : public model_base_crtp<mixture_pl_0x43a0y_z0xy_sep_modified_model> {

 private:
  int N_cascadelevel_features;
  int N_videolevel_features;
  int V_train;
  int C_train;
  int E_train;
  std::vector<int> N_cascades_per_video_train;
  std::vector<int> N_cascadesize_per_cascade_train;
  std::vector<int> N_clippedsize_per_cascade_train;
  Eigen::Matrix<double, -1, 1> y_train_data__;
  Eigen::Matrix<double, -1, 1> cascadelevel_features_train_data__;
  Eigen::Matrix<double, -1, 1> videolevel_features_train_data__;
  int V_holdout;
  int C_holdout;
  int E_holdout;
  std::vector<int> N_cascades_per_video_holdout;
  std::vector<int> N_cascadesize_per_cascade_holdout;
  std::vector<int> N_clippedsize_per_cascade_holdout;
  Eigen::Matrix<double, -1, 1> y_holdout_data__;
  Eigen::Matrix<double, -1, 1> cascadelevel_features_holdout_data__;
  Eigen::Matrix<double, -1, 1> videolevel_features_holdout_data__;
  int pmf_size;
  Eigen::Matrix<double, -1, 1> pmf_x_data__;
  Eigen::Matrix<double, -1, 1> pmf_vals_data__;
  int beta_a_raw_1dim__;
  int L_1dim__;
  int L_2dim__;
  int sigma_beta_a_1dim__;
  int beta_av_raw_2dim__;
  int beta_a_mean_1dim__;
  int beta_a_sd_1dim__;
  int beta_a_1dim__;
  int beta_av_2dim__;
  int beta_av_holdout_2dim__;
  int Omega_beta_1dim__;
  int Omega_beta_2dim__;
  int covariance_beta_1dim__;
  int covariance_beta_2dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cascadelevel_features_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> videolevel_features_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_holdout{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cascadelevel_features_holdout{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> videolevel_features_holdout{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pmf_x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pmf_vals{nullptr, 0};
 
 public:
  ~mixture_pl_0x43a0y_z0xy_sep_modified_model() { }
  
  inline std::string model_name() const final { return "mixture_pl_0x43a0y_z0xy_sep_modified_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  mixture_pl_0x43a0y_z0xy_sep_modified_model(stan::io::var_context& context__,
                                             unsigned int random_seed__ = 0,
                                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mixture_pl_0x43a0y_z0xy_sep_modified_model_namespace::mixture_pl_0x43a0y_z0xy_sep_modified_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 88;
      context__.validate_dims("data initialization",
          "N_cascadelevel_features","int", std::vector<size_t>{});
      N_cascadelevel_features = std::numeric_limits<int>::min();
      
      
      current_statement__ = 88;
      N_cascadelevel_features = context__.vals_i("N_cascadelevel_features")[
          (1 - 1)];
      current_statement__ = 89;
      context__.validate_dims("data initialization","N_videolevel_features",
          "int", std::vector<size_t>{});
      N_videolevel_features = std::numeric_limits<int>::min();
      
      
      current_statement__ = 89;
      N_videolevel_features = context__.vals_i("N_videolevel_features")[
          (1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization","V_train","int",
           std::vector<size_t>{});
      V_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 90;
      V_train = context__.vals_i("V_train")[(1 - 1)];
      current_statement__ = 90;
      stan::math::check_greater_or_equal(function__, "V_train", V_train, 0);
      current_statement__ = 91;
      context__.validate_dims("data initialization","C_train","int",
           std::vector<size_t>{});
      C_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 91;
      C_train = context__.vals_i("C_train")[(1 - 1)];
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "C_train", C_train, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization","E_train","int",
           std::vector<size_t>{});
      E_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 92;
      E_train = context__.vals_i("E_train")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "E_train", E_train, 0);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("N_cascades_per_video_train",
                                              "V_train", V_train);
      current_statement__ = 94;
      context__.validate_dims("data initialization",
          "N_cascades_per_video_train","int",
           std::vector<size_t>{static_cast<size_t>(V_train)});
      N_cascades_per_video_train = 
        std::vector<int>(V_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 94;
      N_cascades_per_video_train = context__.vals_i("N_cascades_per_video_train");
      current_statement__ = 95;
      stan::math::validate_non_negative_index("N_cascadesize_per_cascade_train",
                                              "C_train", C_train);
      current_statement__ = 96;
      context__.validate_dims("data initialization",
          "N_cascadesize_per_cascade_train","int",
           std::vector<size_t>{static_cast<size_t>(C_train)});
      N_cascadesize_per_cascade_train = 
        std::vector<int>(C_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 96;
      N_cascadesize_per_cascade_train = context__.vals_i("N_cascadesize_per_cascade_train");
      current_statement__ = 97;
      stan::math::validate_non_negative_index("N_clippedsize_per_cascade_train",
                                              "C_train", C_train);
      current_statement__ = 98;
      context__.validate_dims("data initialization",
          "N_clippedsize_per_cascade_train","int",
           std::vector<size_t>{static_cast<size_t>(C_train)});
      N_clippedsize_per_cascade_train = 
        std::vector<int>(C_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 98;
      N_clippedsize_per_cascade_train = context__.vals_i("N_clippedsize_per_cascade_train");
      current_statement__ = 99;
      stan::math::validate_non_negative_index("y_train", "E_train", E_train);
      current_statement__ = 100;
      context__.validate_dims("data initialization","y_train","double",
           std::vector<size_t>{static_cast<size_t>(E_train)});
      y_train_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(E_train,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_train_data__.data(), E_train);
        
      
      {
        std::vector<local_scalar_t__> y_train_flat__;
        current_statement__ = 100;
        y_train_flat__ = context__.vals_r("y_train");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= E_train; ++sym1__) {
          current_statement__ = 100;
          stan::model::assign(y_train, y_train_flat__[(pos__ - 1)],
            "assigning variable y_train", stan::model::index_uni(sym1__));
          current_statement__ = 100;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "y_train", y_train, 0);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("cascadelevel_features_train",
                                              "N_cascadelevel_features * C_train",
                                              (N_cascadelevel_features *
                                                C_train));
      current_statement__ = 102;
      context__.validate_dims("data initialization",
          "cascadelevel_features_train","double",
           std::vector<size_t>{
            static_cast<size_t>((N_cascadelevel_features * C_train))});
      cascadelevel_features_train_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_cascadelevel_features * C_train),
          std::numeric_limits<double>::quiet_NaN());
      new (&cascadelevel_features_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cascadelevel_features_train_data__.data(), 
        (N_cascadelevel_features * C_train));
      
      {
        std::vector<local_scalar_t__> cascadelevel_features_train_flat__;
        current_statement__ = 102;
        cascadelevel_features_train_flat__ = context__.vals_r("cascadelevel_features_train");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= (N_cascadelevel_features * C_train);
             ++sym1__) {
          current_statement__ = 102;
          stan::model::assign(cascadelevel_features_train,
            cascadelevel_features_train_flat__[(pos__ - 1)],
            "assigning variable cascadelevel_features_train", stan::model::index_uni(sym1__));
          current_statement__ = 102;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 103;
      stan::math::validate_non_negative_index("videolevel_features_train",
                                              "N_videolevel_features * V_train",
                                              (N_videolevel_features *
                                                V_train));
      current_statement__ = 104;
      context__.validate_dims("data initialization",
          "videolevel_features_train","double",
           std::vector<size_t>{
            static_cast<size_t>((N_videolevel_features * V_train))});
      videolevel_features_train_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_videolevel_features * V_train),
          std::numeric_limits<double>::quiet_NaN());
      new (&videolevel_features_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(videolevel_features_train_data__.data(), 
        (N_videolevel_features * V_train));
      
      {
        std::vector<local_scalar_t__> videolevel_features_train_flat__;
        current_statement__ = 104;
        videolevel_features_train_flat__ = context__.vals_r("videolevel_features_train");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= (N_videolevel_features * V_train);
             ++sym1__) {
          current_statement__ = 104;
          stan::model::assign(videolevel_features_train,
            videolevel_features_train_flat__[(pos__ - 1)],
            "assigning variable videolevel_features_train", stan::model::index_uni(sym1__));
          current_statement__ = 104;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 105;
      context__.validate_dims("data initialization","V_holdout","int",
           std::vector<size_t>{});
      V_holdout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 105;
      V_holdout = context__.vals_i("V_holdout")[(1 - 1)];
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "V_holdout", V_holdout,
                                            0);
      current_statement__ = 106;
      context__.validate_dims("data initialization","C_holdout","int",
           std::vector<size_t>{});
      C_holdout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 106;
      C_holdout = context__.vals_i("C_holdout")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "C_holdout", C_holdout,
                                            0);
      current_statement__ = 107;
      context__.validate_dims("data initialization","E_holdout","int",
           std::vector<size_t>{});
      E_holdout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 107;
      E_holdout = context__.vals_i("E_holdout")[(1 - 1)];
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "E_holdout", E_holdout,
                                            0);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("N_cascades_per_video_holdout",
                                              "V_holdout", V_holdout);
      current_statement__ = 109;
      context__.validate_dims("data initialization",
          "N_cascades_per_video_holdout","int",
           std::vector<size_t>{static_cast<size_t>(V_holdout)});
      N_cascades_per_video_holdout = 
        std::vector<int>(V_holdout, std::numeric_limits<int>::min());
      
      
      current_statement__ = 109;
      N_cascades_per_video_holdout = context__.vals_i("N_cascades_per_video_holdout");
      current_statement__ = 110;
      stan::math::validate_non_negative_index("N_cascadesize_per_cascade_holdout",
                                              "C_holdout", C_holdout);
      current_statement__ = 111;
      context__.validate_dims("data initialization",
          "N_cascadesize_per_cascade_holdout","int",
           std::vector<size_t>{static_cast<size_t>(C_holdout)});
      N_cascadesize_per_cascade_holdout = 
        std::vector<int>(C_holdout, std::numeric_limits<int>::min());
      
      
      current_statement__ = 111;
      N_cascadesize_per_cascade_holdout = context__.vals_i("N_cascadesize_per_cascade_holdout");
      current_statement__ = 112;
      stan::math::validate_non_negative_index("N_clippedsize_per_cascade_holdout",
                                              "C_holdout", C_holdout);
      current_statement__ = 113;
      context__.validate_dims("data initialization",
          "N_clippedsize_per_cascade_holdout","int",
           std::vector<size_t>{static_cast<size_t>(C_holdout)});
      N_clippedsize_per_cascade_holdout = 
        std::vector<int>(C_holdout, std::numeric_limits<int>::min());
      
      
      current_statement__ = 113;
      N_clippedsize_per_cascade_holdout = context__.vals_i("N_clippedsize_per_cascade_holdout");
      current_statement__ = 114;
      stan::math::validate_non_negative_index("y_holdout", "E_holdout",
                                              E_holdout);
      current_statement__ = 115;
      context__.validate_dims("data initialization","y_holdout","double",
           std::vector<size_t>{static_cast<size_t>(E_holdout)});
      y_holdout_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(E_holdout,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_holdout) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_holdout_data__.data(), E_holdout);
        
      
      {
        std::vector<local_scalar_t__> y_holdout_flat__;
        current_statement__ = 115;
        y_holdout_flat__ = context__.vals_r("y_holdout");
        current_statement__ = 115;
        pos__ = 1;
        current_statement__ = 115;
        for (int sym1__ = 1; sym1__ <= E_holdout; ++sym1__) {
          current_statement__ = 115;
          stan::model::assign(y_holdout, y_holdout_flat__[(pos__ - 1)],
            "assigning variable y_holdout", stan::model::index_uni(sym1__));
          current_statement__ = 115;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "y_holdout", y_holdout,
                                            0);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("cascadelevel_features_holdout",
                                              "N_cascadelevel_features * C_holdout",
                                              (N_cascadelevel_features *
                                                C_holdout));
      current_statement__ = 117;
      context__.validate_dims("data initialization",
          "cascadelevel_features_holdout","double",
           std::vector<size_t>{
            static_cast<size_t>((N_cascadelevel_features * C_holdout))});
      cascadelevel_features_holdout_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_cascadelevel_features * C_holdout),
          std::numeric_limits<double>::quiet_NaN());
      new (&cascadelevel_features_holdout) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cascadelevel_features_holdout_data__.data(), 
        (N_cascadelevel_features * C_holdout));
      
      {
        std::vector<local_scalar_t__> cascadelevel_features_holdout_flat__;
        current_statement__ = 117;
        cascadelevel_features_holdout_flat__ = context__.vals_r("cascadelevel_features_holdout");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= (N_cascadelevel_features * C_holdout);
             ++sym1__) {
          current_statement__ = 117;
          stan::model::assign(cascadelevel_features_holdout,
            cascadelevel_features_holdout_flat__[(pos__ - 1)],
            "assigning variable cascadelevel_features_holdout", stan::model::index_uni(sym1__));
          current_statement__ = 117;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 118;
      stan::math::validate_non_negative_index("videolevel_features_holdout",
                                              "N_videolevel_features * V_holdout",
                                              (N_videolevel_features *
                                                V_holdout));
      current_statement__ = 119;
      context__.validate_dims("data initialization",
          "videolevel_features_holdout","double",
           std::vector<size_t>{
            static_cast<size_t>((N_videolevel_features * V_holdout))});
      videolevel_features_holdout_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(
          (N_videolevel_features * V_holdout),
          std::numeric_limits<double>::quiet_NaN());
      new (&videolevel_features_holdout) Eigen::Map<Eigen::Matrix<double, -1, 1>>(videolevel_features_holdout_data__.data(), 
        (N_videolevel_features * V_holdout));
      
      {
        std::vector<local_scalar_t__> videolevel_features_holdout_flat__;
        current_statement__ = 119;
        videolevel_features_holdout_flat__ = context__.vals_r("videolevel_features_holdout");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= (N_videolevel_features * V_holdout);
             ++sym1__) {
          current_statement__ = 119;
          stan::model::assign(videolevel_features_holdout,
            videolevel_features_holdout_flat__[(pos__ - 1)],
            "assigning variable videolevel_features_holdout", stan::model::index_uni(sym1__));
          current_statement__ = 119;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 120;
      context__.validate_dims("data initialization","pmf_size","int",
           std::vector<size_t>{});
      pmf_size = std::numeric_limits<int>::min();
      
      
      current_statement__ = 120;
      pmf_size = context__.vals_i("pmf_size")[(1 - 1)];
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "pmf_size", pmf_size, 0);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("pmf_x", "pmf_size", pmf_size);
      current_statement__ = 122;
      context__.validate_dims("data initialization","pmf_x","double",
           std::vector<size_t>{static_cast<size_t>(pmf_size)});
      pmf_x_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(pmf_size,
          std::numeric_limits<double>::quiet_NaN());
      new (&pmf_x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pmf_x_data__.data(), pmf_size);
        
      
      {
        std::vector<local_scalar_t__> pmf_x_flat__;
        current_statement__ = 122;
        pmf_x_flat__ = context__.vals_r("pmf_x");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= pmf_size; ++sym1__) {
          current_statement__ = 122;
          stan::model::assign(pmf_x, pmf_x_flat__[(pos__ - 1)],
            "assigning variable pmf_x", stan::model::index_uni(sym1__));
          current_statement__ = 122;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 123;
      stan::math::validate_non_negative_index("pmf_vals", "pmf_size",
                                              pmf_size);
      current_statement__ = 124;
      context__.validate_dims("data initialization","pmf_vals","double",
           std::vector<size_t>{static_cast<size_t>(pmf_size)});
      pmf_vals_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(pmf_size,
          std::numeric_limits<double>::quiet_NaN());
      new (&pmf_vals) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pmf_vals_data__.data(), pmf_size);
        
      
      {
        std::vector<local_scalar_t__> pmf_vals_flat__;
        current_statement__ = 124;
        pmf_vals_flat__ = context__.vals_r("pmf_vals");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= pmf_size; ++sym1__) {
          current_statement__ = 124;
          stan::model::assign(pmf_vals, pmf_vals_flat__[(pos__ - 1)],
            "assigning variable pmf_vals", stan::model::index_uni(sym1__));
          current_statement__ = 124;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 125;
      beta_a_raw_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 125;
      beta_a_raw_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("beta_a_raw",
                                              "N_cascadelevel_features + 3",
                                              beta_a_raw_1dim__);
      current_statement__ = 126;
      L_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 126;
      L_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("L",
                                              "N_cascadelevel_features + 3",
                                              L_1dim__);
      current_statement__ = 126;
      L_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 126;
      L_2dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("L",
                                              "N_cascadelevel_features + 3",
                                              L_2dim__);
      current_statement__ = 127;
      sigma_beta_a_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 127;
      sigma_beta_a_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("sigma_beta_a",
                                              "N_cascadelevel_features + 3",
                                              sigma_beta_a_1dim__);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("beta_av_raw", "V_train",
                                              V_train);
      current_statement__ = 129;
      beta_av_raw_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 129;
      beta_av_raw_2dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("beta_av_raw",
                                              "N_cascadelevel_features + 3",
                                              beta_av_raw_2dim__);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("gamma_z_alpha_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("gamma_a_alpha_raw",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 132;
      beta_a_mean_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 132;
      beta_a_mean_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("beta_a_mean",
                                              "N_cascadelevel_features + 3",
                                              beta_a_mean_1dim__);
      current_statement__ = 133;
      beta_a_sd_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 133;
      beta_a_sd_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("beta_a_sd",
                                              "N_cascadelevel_features + 3",
                                              beta_a_sd_1dim__);
      current_statement__ = 134;
      beta_a_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 134;
      beta_a_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("beta_a",
                                              "N_cascadelevel_features + 3",
                                              beta_a_1dim__);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("beta_av", "V_train", V_train);
      current_statement__ = 136;
      beta_av_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 136;
      beta_av_2dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("beta_av",
                                              "N_cascadelevel_features + 3",
                                              beta_av_2dim__);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("gamma_a_alpha",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("gamma_z_alpha",
                                              "N_videolevel_features",
                                              N_videolevel_features);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("beta_av_holdout", "V_holdout",
                                              V_holdout);
      current_statement__ = 140;
      beta_av_holdout_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 140;
      beta_av_holdout_2dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("beta_av_holdout",
                                              "N_cascadelevel_features + 3",
                                              beta_av_holdout_2dim__);
      current_statement__ = 141;
      Omega_beta_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 141;
      Omega_beta_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("Omega_beta",
                                              "N_cascadelevel_features + 3",
                                              Omega_beta_1dim__);
      current_statement__ = 142;
      Omega_beta_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 142;
      Omega_beta_2dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("Omega_beta",
                                              "N_cascadelevel_features + 3",
                                              Omega_beta_2dim__);
      current_statement__ = 143;
      covariance_beta_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 143;
      covariance_beta_1dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("covariance_beta",
                                              "N_cascadelevel_features + 3",
                                              covariance_beta_1dim__);
      current_statement__ = 144;
      covariance_beta_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 144;
      covariance_beta_2dim__ = (N_cascadelevel_features + 3);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("covariance_beta",
                                              "N_cascadelevel_features + 3",
                                              covariance_beta_2dim__);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("pred_holdout", "V_holdout",
                                              V_holdout);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("qred_holdout", "V_holdout",
                                              V_holdout);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("actual_holdout", "V_holdout",
                                              V_holdout);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = beta_a_raw_1dim__ + ((L_1dim__ * (L_1dim__ - 1)) / 2)
       + sigma_beta_a_1dim__ + (V_train * beta_av_raw_2dim__) + 1
       + N_videolevel_features + 1 + N_videolevel_features;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mixture_pl_0x43a0y_z0xy_sep_modified_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_raw_1dim__,
           DUMMY_VAR__);
      current_statement__ = 1;
      beta_a_raw = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     beta_a_raw_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(L_1dim__,
           L_2dim__, DUMMY_VAR__);
      current_statement__ = 2;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
            L_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           sigma_beta_a_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      sigma_beta_a = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                       lp__, sigma_beta_a_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
             beta_av_raw_2dim__, DUMMY_VAR__));
      current_statement__ = 4;
      beta_av_raw = in__.template read<
                      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                      V_train, beta_av_raw_2dim__);
      local_scalar_t__ gamma_z_alpha_sd = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_z_alpha_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_z_alpha_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 6;
      gamma_z_alpha_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      local_scalar_t__ gamma_a_alpha_sd = DUMMY_VAR__;
      current_statement__ = 7;
      gamma_a_alpha_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_alpha_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 8;
      gamma_a_alpha_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_mean =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_mean_1dim__,
           DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(beta_a_mean,
        stan::math::rep_vector(0, (N_cascadelevel_features + 3)),
        "assigning variable beta_a_mean");
      current_statement__ = 17;
      stan::model::assign(beta_a_mean, -1.39,
        "assigning variable beta_a_mean", stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(beta_a_mean, 2,
        "assigning variable beta_a_mean", stan::model::index_uni(2));
      current_statement__ = 19;
      stan::model::assign(beta_a_mean, -2,
        "assigning variable beta_a_mean", stan::model::index_uni(3));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_sd =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_sd_1dim__,
           DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(beta_a_sd,
        stan::math::rep_vector(0.1, (N_cascadelevel_features + 3)),
        "assigning variable beta_a_sd");
      current_statement__ = 20;
      stan::model::assign(beta_a_sd, 0.5,
        "assigning variable beta_a_sd", stan::model::index_uni(1));
      current_statement__ = 21;
      stan::model::assign(beta_a_sd, 0.5,
        "assigning variable beta_a_sd", stan::model::index_uni(2));
      current_statement__ = 22;
      stan::model::assign(beta_a_sd, 0.5,
        "assigning variable beta_a_sd", stan::model::index_uni(3));
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_1dim__,
           DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(beta_a,
        stan::math::add(beta_a_mean,
          stan::math::elt_multiply(beta_a_sd, beta_a_raw)),
        "assigning variable beta_a");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_av_2dim__,
             DUMMY_VAR__));
      local_scalar_t__ gamma_a_alpha_mean = DUMMY_VAR__;
      current_statement__ = 13;
      gamma_a_alpha_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(gamma_a_alpha,
        stan::math::add(gamma_a_alpha_mean,
          stan::math::multiply(gamma_a_alpha_sd, gamma_a_alpha_raw)),
        "assigning variable gamma_a_alpha");
      local_scalar_t__ gamma_z_alpha_mean = DUMMY_VAR__;
      current_statement__ = 15;
      gamma_z_alpha_mean = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_z_alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(gamma_z_alpha,
        stan::math::add(gamma_z_alpha_mean,
          stan::math::multiply(gamma_z_alpha_sd, gamma_z_alpha_raw)),
        "assigning variable gamma_z_alpha");
      current_statement__ = 25;
      for (int v = 1; v <= V_train; ++v) {
        current_statement__ = 23;
        stan::model::assign(beta_av,
          stan::math::add(beta_a,
            stan::math::elt_multiply(sigma_beta_a,
              stan::math::multiply(L,
                stan::model::rvalue(beta_av_raw, "beta_av_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av", stan::model::index_uni(v));
      }
      {
        current_statement__ = 58;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a, "sigma_beta_a",
              stan::model::index_uni(1)), 0, 1));
        current_statement__ = 59;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a, "sigma_beta_a",
              stan::model::index_uni(2)), 0, 1));
        current_statement__ = 60;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a, "sigma_beta_a",
              stan::model::index_uni(3)), 0, 1));
        current_statement__ = 61;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(sigma_beta_a, "sigma_beta_a",
              stan::model::index_uni(4)), 0, 0.1));
        current_statement__ = 62;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L, 2));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_a_raw, 0, 1));
        current_statement__ = 64;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_z_alpha_sd, 10));
        current_statement__ = 65;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_z_alpha_raw, 0, 1));
        current_statement__ = 66;
        lp_accum__.add(
          stan::math::exponential_lpdf<propto__>(gamma_a_alpha_sd, 10));
        current_statement__ = 67;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(gamma_a_alpha_raw, 0, 1));
        int pos_E = std::numeric_limits<int>::min();
        current_statement__ = 68;
        pos_E = 1;
        int pos_C = std::numeric_limits<int>::min();
        current_statement__ = 69;
        pos_C = 1;
        current_statement__ = 87;
        for (int v = 1; v <= V_train; ++v) {
          int C_of_v = std::numeric_limits<int>::min();
          current_statement__ = 70;
          C_of_v = stan::model::rvalue(N_cascades_per_video_train,
                     "N_cascades_per_video_train", stan::model::index_uni(v));
          current_statement__ = 71;
          stan::math::validate_non_negative_index("y_av",
                                                  "N_videolevel_features",
                                                  N_videolevel_features);
          Eigen::Matrix<local_scalar_t__, -1, 1> y_av =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
               N_videolevel_features, DUMMY_VAR__);
          current_statement__ = 72;
          stan::model::assign(y_av,
            stan::model::rvalue(videolevel_features_train,
              "videolevel_features_train",
              stan::model::index_min_max((1 +
                                           ((v - 1) * N_videolevel_features)), 
                (v * N_videolevel_features))), "assigning variable y_av");
          current_statement__ = 73;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(beta_av_raw, "beta_av_raw",
                stan::model::index_uni(v)), 0, 1));
          current_statement__ = 74;
          stan::math::validate_non_negative_index("cascade_sizes", "C_of_v",
                                                  C_of_v);
          std::vector<int> cascade_sizes =
             std::vector<int>(C_of_v, std::numeric_limits<int>::min());
          current_statement__ = 75;
          stan::model::assign(cascade_sizes,
            stan::model::rvalue(N_cascadesize_per_cascade_train,
              "N_cascadesize_per_cascade_train",
              stan::model::index_min_max(pos_C, ((pos_C + C_of_v) - 1))),
            "assigning variable cascade_sizes");
          local_scalar_t__ alpha_avc_popular = DUMMY_VAR__;
          current_statement__ = 76;
          alpha_avc_popular = stan::math::inv_logit(
                                (stan::model::rvalue(
                                   stan::model::rvalue(beta_av, "beta_av", stan::model::index_uni(v)),
                                   "beta_av[v]", stan::model::index_uni(2)) +
                                  stan::math::dot_product(gamma_a_alpha,
                                    y_av)));
          local_scalar_t__ alpha_avc_unpopular = DUMMY_VAR__;
          current_statement__ = 77;
          alpha_avc_unpopular = stan::math::inv_logit(
                                  (stan::model::rvalue(
                                     stan::model::rvalue(beta_av, "beta_av", stan::model::index_uni(v)),
                                     "beta_av[v]", stan::model::index_uni(3))
                                    +
                                    stan::math::dot_product(gamma_a_alpha,
                                      y_av)));
          current_statement__ = 83;
          for (int k = 1; k <= C_of_v; ++k) {
            current_statement__ = 78;
            stan::math::validate_non_negative_index("x_avc",
                                                    "N_cascadelevel_features",
                                                    N_cascadelevel_features);
            Eigen::Matrix<local_scalar_t__, -1, 1> x_avc =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
                 N_cascadelevel_features, DUMMY_VAR__);
            current_statement__ = 79;
            stan::model::assign(x_avc,
              stan::model::rvalue(cascadelevel_features_train,
                "cascadelevel_features_train",
                stan::model::index_min_max((((((pos_C + k) - 1) - 1) *
                                              N_cascadelevel_features) + 1), 
                  (((pos_C + k) - 1) * N_cascadelevel_features))),
              "assigning variable x_avc");
            local_scalar_t__ zinf_avc = DUMMY_VAR__;
            current_statement__ = 80;
            zinf_avc = stan::math::inv_logit(
                         ((stan::model::rvalue(
                             stan::model::rvalue(beta_av, "beta_av", stan::model::index_uni(v)),
                             "beta_av[v]", stan::model::index_uni(1)) +
                            stan::math::dot_product(
                              stan::model::rvalue(
                                stan::model::rvalue(beta_av, "beta_av", stan::model::index_uni(v)),
                                "beta_av[v]", stan::model::index_min(4)),
                              x_avc)) +
                           stan::math::dot_product(gamma_z_alpha, y_av)));
            current_statement__ = 81;
            lp_accum__.add(
              stan::math::log_sum_exp(
                ((stan::math::log(zinf_avc) +
                   stan::math::poisson_lpmf<false>(
                     (stan::model::rvalue(cascade_sizes, "cascade_sizes",
                        stan::model::index_uni(k)) - 1),
                     (stan::model::rvalue(cascade_sizes, "cascade_sizes",
                        stan::model::index_uni(k)) * alpha_avc_popular))) -
                  stan::math::log(
                    stan::model::rvalue(cascade_sizes, "cascade_sizes",
                      stan::model::index_uni(k)))),
                ((stan::math::log1m(zinf_avc) +
                   stan::math::poisson_lpmf<false>(
                     (stan::model::rvalue(cascade_sizes, "cascade_sizes",
                        stan::model::index_uni(k)) - 1),
                     (stan::model::rvalue(cascade_sizes, "cascade_sizes",
                        stan::model::index_uni(k)) * alpha_avc_unpopular))) -
                  stan::math::log(
                    stan::model::rvalue(cascade_sizes, "cascade_sizes",
                      stan::model::index_uni(k))))));
          }
          current_statement__ = 84;
          pos_E = (pos_E +
                    stan::math::to_int(
                      stan::math::sum(
                        stan::model::rvalue(N_cascadesize_per_cascade_train,
                          "N_cascadesize_per_cascade_train",
                          stan::model::index_min_max(pos_C, ((pos_C + C_of_v)
                                                              - 1))))));
          current_statement__ = 85;
          pos_C = (pos_C + C_of_v);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mixture_pl_0x43a0y_z0xy_sep_modified_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> beta_a_raw =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_raw_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_a_raw = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     beta_a_raw_1dim__);
      Eigen::Matrix<double, -1, -1> L =
         Eigen::Matrix<double, -1, -1>::Constant(L_1dim__, L_2dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__,
            L_2dim__);
      Eigen::Matrix<double, -1, 1> sigma_beta_a =
         Eigen::Matrix<double, -1, 1>::Constant(sigma_beta_a_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma_beta_a = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                       lp__, sigma_beta_a_1dim__);
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_raw =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(beta_av_raw_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      beta_av_raw = in__.template read<
                      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                      V_train, beta_av_raw_2dim__);
      double gamma_z_alpha_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      gamma_z_alpha_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_z_alpha_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      gamma_z_alpha_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      double gamma_a_alpha_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      gamma_a_alpha_sd = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> gamma_a_alpha_raw =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      gamma_a_alpha_raw = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_videolevel_features);
      Eigen::Matrix<double, -1, 1> beta_a_mean =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_mean_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a_sd =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_sd_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta_a =
         Eigen::Matrix<double, -1, 1>::Constant(beta_a_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_train, 
           Eigen::Matrix<double, -1, 1>::Constant(beta_av_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      double gamma_a_alpha_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_a_alpha =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      double gamma_z_alpha_mean = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> gamma_z_alpha =
         Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(beta_a_raw);
      out__.write(L);
      out__.write(sigma_beta_a);
      for (int sym1__ = 1; sym1__ <= beta_av_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          out__.write(beta_av_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(gamma_z_alpha_sd);
      out__.write(gamma_z_alpha_raw);
      out__.write(gamma_a_alpha_sd);
      out__.write(gamma_a_alpha_raw);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      stan::model::assign(beta_a_mean,
        stan::math::rep_vector(0, (N_cascadelevel_features + 3)),
        "assigning variable beta_a_mean");
      current_statement__ = 17;
      stan::model::assign(beta_a_mean, -1.39,
        "assigning variable beta_a_mean", stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(beta_a_mean, 2,
        "assigning variable beta_a_mean", stan::model::index_uni(2));
      current_statement__ = 19;
      stan::model::assign(beta_a_mean, -2,
        "assigning variable beta_a_mean", stan::model::index_uni(3));
      current_statement__ = 10;
      stan::model::assign(beta_a_sd,
        stan::math::rep_vector(0.1, (N_cascadelevel_features + 3)),
        "assigning variable beta_a_sd");
      current_statement__ = 20;
      stan::model::assign(beta_a_sd, 0.5,
        "assigning variable beta_a_sd", stan::model::index_uni(1));
      current_statement__ = 21;
      stan::model::assign(beta_a_sd, 0.5,
        "assigning variable beta_a_sd", stan::model::index_uni(2));
      current_statement__ = 22;
      stan::model::assign(beta_a_sd, 0.5,
        "assigning variable beta_a_sd", stan::model::index_uni(3));
      current_statement__ = 11;
      stan::model::assign(beta_a,
        stan::math::add(beta_a_mean,
          stan::math::elt_multiply(beta_a_sd, beta_a_raw)),
        "assigning variable beta_a");
      current_statement__ = 13;
      gamma_a_alpha_mean = 0;
      current_statement__ = 14;
      stan::model::assign(gamma_a_alpha,
        stan::math::add(gamma_a_alpha_mean,
          stan::math::multiply(gamma_a_alpha_sd, gamma_a_alpha_raw)),
        "assigning variable gamma_a_alpha");
      current_statement__ = 15;
      gamma_z_alpha_mean = 0;
      current_statement__ = 16;
      stan::model::assign(gamma_z_alpha,
        stan::math::add(gamma_z_alpha_mean,
          stan::math::multiply(gamma_z_alpha_sd, gamma_z_alpha_raw)),
        "assigning variable gamma_z_alpha");
      current_statement__ = 25;
      for (int v = 1; v <= V_train; ++v) {
        current_statement__ = 23;
        stan::model::assign(beta_av,
          stan::math::add(beta_a,
            stan::math::elt_multiply(sigma_beta_a,
              stan::math::multiply(L,
                stan::model::rvalue(beta_av_raw, "beta_av_raw",
                  stan::model::index_uni(v))))),
          "assigning variable beta_av", stan::model::index_uni(v));
      }
      if (emit_transformed_parameters__) {
        out__.write(beta_a_mean);
        out__.write(beta_a_sd);
        out__.write(beta_a);
        for (int sym1__ = 1; sym1__ <= beta_av_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            out__.write(beta_av[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(gamma_a_alpha_mean);
        out__.write(gamma_a_alpha);
        out__.write(gamma_z_alpha_mean);
        out__.write(gamma_z_alpha);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int pos_C = std::numeric_limits<int>::min();
      current_statement__ = 26;
      pos_C = 1;
      int pos_E = std::numeric_limits<int>::min();
      current_statement__ = 27;
      pos_E = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> beta_av_holdout =
         std::vector<Eigen::Matrix<double, -1, 1>>(V_holdout, 
           Eigen::Matrix<double, -1, 1>::Constant(beta_av_holdout_2dim__,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> Omega_beta =
         Eigen::Matrix<double, -1, -1>::Constant(Omega_beta_1dim__,
           Omega_beta_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 29;
      stan::model::assign(Omega_beta,
        stan::math::multiply(L, stan::math::transpose(L)),
        "assigning variable Omega_beta");
      Eigen::Matrix<double, -1, -1> covariance_beta =
         Eigen::Matrix<double, -1, -1>::Constant(covariance_beta_1dim__,
           covariance_beta_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      stan::model::assign(covariance_beta,
        stan::math::quad_form_diag(Omega_beta, sigma_beta_a),
        "assigning variable covariance_beta");
      Eigen::Matrix<double, -1, 1> pred_holdout =
         Eigen::Matrix<double, -1, 1>::Constant(V_holdout,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 31;
      stan::model::assign(pred_holdout, stan::math::rep_vector(0, V_holdout),
        "assigning variable pred_holdout");
      Eigen::Matrix<double, -1, 1> qred_holdout =
         Eigen::Matrix<double, -1, 1>::Constant(V_holdout,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 32;
      stan::model::assign(qred_holdout, stan::math::rep_vector(0, V_holdout),
        "assigning variable qred_holdout");
      Eigen::Matrix<double, -1, 1> actual_holdout =
         Eigen::Matrix<double, -1, 1>::Constant(V_holdout,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 33;
      stan::model::assign(actual_holdout,
        stan::math::rep_vector(0, V_holdout),
        "assigning variable actual_holdout");
      current_statement__ = 57;
      for (int v = 1; v <= V_holdout; ++v) {
        current_statement__ = 34;
        stan::model::assign(beta_av_holdout,
          stan::math::multi_normal_rng(beta_a, covariance_beta, base_rng__),
          "assigning variable beta_av_holdout", stan::model::index_uni(v));
        int C_of_v = std::numeric_limits<int>::min();
        current_statement__ = 35;
        C_of_v = stan::model::rvalue(N_cascades_per_video_holdout,
                   "N_cascades_per_video_holdout", stan::model::index_uni(v));
        current_statement__ = 36;
        stan::math::validate_non_negative_index("y_av_holdout",
                                                "N_videolevel_features",
                                                N_videolevel_features);
        Eigen::Matrix<double, -1, 1> y_av_holdout =
           Eigen::Matrix<double, -1, 1>::Constant(N_videolevel_features,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 37;
        stan::model::assign(y_av_holdout,
          stan::model::rvalue(videolevel_features_holdout,
            "videolevel_features_holdout",
            stan::model::index_min_max((1 +
                                         ((v - 1) * N_videolevel_features)), 
              (v * N_videolevel_features))),
          "assigning variable y_av_holdout");
        current_statement__ = 38;
        stan::math::validate_non_negative_index("cascade_sizes_holdout",
                                                "C_of_v", C_of_v);
        std::vector<int> cascade_sizes_holdout =
           std::vector<int>(C_of_v, std::numeric_limits<int>::min());
        current_statement__ = 39;
        stan::model::assign(cascade_sizes_holdout,
          stan::math::to_array_1d(
            stan::model::rvalue(N_cascadesize_per_cascade_holdout,
              "N_cascadesize_per_cascade_holdout",
              stan::model::index_min_max(pos_C, ((pos_C + C_of_v) - 1)))),
          "assigning variable cascade_sizes_holdout");
        double alpha_avc_popular_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 40;
        alpha_avc_popular_holdout = stan::math::inv_logit(
                                      (stan::model::rvalue(
                                         stan::model::rvalue(beta_av_holdout, "beta_av_holdout",
  stan::model::index_uni(v)),
                                         "beta_av_holdout[v]",
                                         stan::model::index_uni(2)) +
                                        stan::math::dot_product(
                                          gamma_a_alpha, y_av_holdout)));
        double alpha_avc_unpopular_holdout =
           std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 41;
        alpha_avc_unpopular_holdout = stan::math::inv_logit(
                                        (stan::model::rvalue(
                                           stan::model::rvalue(beta_av_holdout, "beta_av_holdout",
  stan::model::index_uni(v)),
                                           "beta_av_holdout[v]",
                                           stan::model::index_uni(3)) +
                                          stan::math::dot_product(
                                            gamma_a_alpha, y_av_holdout)));
        current_statement__ = 52;
        for (int k = 1; k <= pmf_size; ++k) {
          current_statement__ = 42;
          stan::math::validate_non_negative_index("x_avc_holdout",
                                                  "N_cascadelevel_features",
                                                  N_cascadelevel_features);
          Eigen::Matrix<double, -1, 1> x_avc_holdout =
             Eigen::Matrix<double, -1, 1>::Constant(N_cascadelevel_features,
               std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 43;
          stan::model::assign(x_avc_holdout,
            stan::math::rep_vector(
              stan::model::rvalue(pmf_x, "pmf_x", stan::model::index_uni(k)),
              N_cascadelevel_features), "assigning variable x_avc_holdout");
          double zinf_avc_holdout = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 44;
          zinf_avc_holdout = stan::math::inv_logit(
                               ((stan::model::rvalue(
                                   stan::model::rvalue(beta_av_holdout, "beta_av_holdout",
  stan::model::index_uni(v)),
                                   "beta_av_holdout[v]",
                                   stan::model::index_uni(1)) +
                                  stan::math::dot_product(
                                    stan::model::rvalue(
                                      stan::model::rvalue(beta_av_holdout, "beta_av_holdout",
  stan::model::index_uni(v)),
                                      "beta_av_holdout[v]",
                                      stan::model::index_min(4)),
                                    x_avc_holdout)) +
                                 stan::math::dot_product(gamma_z_alpha,
                                   y_av_holdout)));
          double pred_cascadesize_popular_avc_holdout =
             std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 45;
          pred_cascadesize_popular_avc_holdout = (1 /
                                                   (1 -
                                                     alpha_avc_popular_holdout));
          double pred_cascadesize_unpopular_avc_holdout =
             std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 46;
          pred_cascadesize_unpopular_avc_holdout = (1 /
                                                     (1 -
                                                       alpha_avc_unpopular_holdout));
          double pred_cascadesize_avc_holdout =
             std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 47;
          pred_cascadesize_avc_holdout = ((pred_cascadesize_popular_avc_holdout
                                            * zinf_avc_holdout) +
                                           (pred_cascadesize_unpopular_avc_holdout
                                             * (1 - zinf_avc_holdout)));
          double qred_cascadesize_avc_holdout =
             std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 48;
          qred_cascadesize_avc_holdout = ((pred_cascadesize_popular_avc_holdout
                                            *
                                            stan::math::round(
                                              zinf_avc_holdout)) +
                                           (pred_cascadesize_unpopular_avc_holdout
                                             *
                                             (1 -
                                               stan::math::round(
                                                 zinf_avc_holdout))));
          current_statement__ = 49;
          stan::model::assign(pred_holdout,
            (stan::model::rvalue(pred_holdout, "pred_holdout",
               stan::model::index_uni(v)) +
              (pred_cascadesize_avc_holdout *
                stan::model::rvalue(pmf_vals, "pmf_vals",
                  stan::model::index_uni(k)))),
            "assigning variable pred_holdout", stan::model::index_uni(v));
          current_statement__ = 50;
          stan::model::assign(qred_holdout,
            (stan::model::rvalue(qred_holdout, "qred_holdout",
               stan::model::index_uni(v)) +
              (qred_cascadesize_avc_holdout *
                stan::model::rvalue(pmf_vals, "pmf_vals",
                  stan::model::index_uni(k)))),
            "assigning variable qred_holdout", stan::model::index_uni(v));
        }
        current_statement__ = 53;
        stan::model::assign(actual_holdout,
          stan::math::sum(
            stan::model::rvalue(N_cascadesize_per_cascade_holdout,
              "N_cascadesize_per_cascade_holdout",
              stan::model::index_min_max(pos_C, ((pos_C + C_of_v) - 1)))),
          "assigning variable actual_holdout", stan::model::index_uni(v));
        current_statement__ = 54;
        pos_E = (pos_E +
                  stan::math::to_int(
                    stan::math::sum(
                      stan::model::rvalue(N_cascadesize_per_cascade_holdout,
                        "N_cascadesize_per_cascade_holdout",
                        stan::model::index_min_max(pos_C, ((pos_C + C_of_v) -
                                                            1))))));
        current_statement__ = 55;
        pos_C = (pos_C + C_of_v);
      }
      out__.write(pos_C);
      out__.write(pos_E);
      for (int sym1__ = 1; sym1__ <= beta_av_holdout_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
          out__.write(beta_av_holdout[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(Omega_beta);
      out__.write(covariance_beta);
      out__.write(pred_holdout);
      out__.write(qred_holdout);
      out__.write(actual_holdout);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_a_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(beta_a_raw_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= beta_a_raw_1dim__; ++sym1__) {
        stan::model::assign(beta_a_raw, in__.read<local_scalar_t__>(),
          "assigning variable beta_a_raw", stan::model::index_uni(sym1__));
      }
      out__.write(beta_a_raw);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(L_1dim__,
           L_2dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L_1dim__; ++sym2__) {
          stan::model::assign(L, in__.read<local_scalar_t__>(),
            "assigning variable L", stan::model::index_uni(sym2__),
                                      stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta_a =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           sigma_beta_a_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= sigma_beta_a_1dim__; ++sym1__) {
        stan::model::assign(sigma_beta_a, in__.read<local_scalar_t__>(),
          "assigning variable sigma_beta_a", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_beta_a);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_av_raw =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(V_train, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
             beta_av_raw_2dim__, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= beta_av_raw_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          stan::model::assign(beta_av_raw, in__.read<local_scalar_t__>(),
            "assigning variable beta_av_raw", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta_av_raw);
      local_scalar_t__ gamma_z_alpha_sd = DUMMY_VAR__;
      gamma_z_alpha_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_z_alpha_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_z_alpha_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_z_alpha_raw, in__.read<local_scalar_t__>(),
          "assigning variable gamma_z_alpha_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_z_alpha_raw);
      local_scalar_t__ gamma_a_alpha_sd = DUMMY_VAR__;
      gamma_a_alpha_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_a_alpha_sd);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_alpha_raw =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_videolevel_features, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        stan::model::assign(gamma_a_alpha_raw, in__.read<local_scalar_t__>(),
          "assigning variable gamma_a_alpha_raw", stan::model::index_uni(sym1__));
      }
      out__.write(gamma_a_alpha_raw);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta_a_raw", "L", "sigma_beta_a",
      "beta_av_raw", "gamma_z_alpha_sd", "gamma_z_alpha_raw",
      "gamma_a_alpha_sd", "gamma_a_alpha_raw", "beta_a_mean", "beta_a_sd",
      "beta_a", "beta_av", "gamma_a_alpha_mean", "gamma_a_alpha",
      "gamma_z_alpha_mean", "gamma_z_alpha", "pos_C", "pos_E",
      "beta_av_holdout", "Omega_beta", "covariance_beta", "pred_holdout",
      "qred_holdout", "actual_holdout"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(beta_a_raw_1dim__)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(L_1dim__),
                          static_cast<size_t>(L_2dim__)},
      std::vector<size_t>{static_cast<size_t>(sigma_beta_a_1dim__)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(beta_av_raw_2dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{static_cast<size_t>(beta_a_mean_1dim__)},
      std::vector<size_t>{static_cast<size_t>(beta_a_sd_1dim__)},
      std::vector<size_t>{static_cast<size_t>(beta_a_1dim__)},
      std::vector<size_t>{static_cast<size_t>(V_train),
                          static_cast<size_t>(beta_av_2dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_videolevel_features)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(V_holdout),
                          static_cast<size_t>(beta_av_holdout_2dim__)},
      std::vector<size_t>{static_cast<size_t>(Omega_beta_1dim__),
                          static_cast<size_t>(Omega_beta_2dim__)},
      std::vector<size_t>{static_cast<size_t>(covariance_beta_1dim__),
                          static_cast<size_t>(covariance_beta_2dim__)},
      std::vector<size_t>{static_cast<size_t>(V_holdout)},
      std::vector<size_t>{static_cast<size_t>(V_holdout)},
      std::vector<size_t>{static_cast<size_t>(V_holdout)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta_a_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= L_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= sigma_beta_a_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= beta_av_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_z_alpha_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_z_alpha_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_alpha_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_alpha_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_a_mean_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_sd_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_av_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_alpha_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_z_alpha_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_z_alpha" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "pos_C");
      param_names__.emplace_back(std::string() + "pos_E");
      for (int sym1__ = 1; sym1__ <= beta_av_holdout_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Omega_beta_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Omega_beta_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= covariance_beta_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= covariance_beta_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_holdout" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "qred_holdout" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "actual_holdout" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= beta_a_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_a_raw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= ((L_1dim__ * (L_1dim__ - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= sigma_beta_a_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta_a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= beta_av_raw_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_av_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_z_alpha_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_z_alpha_raw" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "gamma_a_alpha_sd");
    for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a_alpha_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_a_mean_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_sd_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a_sd" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_a_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_a" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_av_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_train; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_a_alpha_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_alpha" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gamma_z_alpha_mean");
      for (int sym1__ = 1; sym1__ <= N_videolevel_features; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_z_alpha" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "pos_C");
      param_names__.emplace_back(std::string() + "pos_E");
      for (int sym1__ = 1; sym1__ <= beta_av_holdout_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= V_holdout; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_av_holdout" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Omega_beta_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Omega_beta_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= covariance_beta_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= covariance_beta_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covariance_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_holdout" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "qred_holdout" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= V_holdout; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "actual_holdout" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta_a_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(L_1dim__) + ",\"cols\":" + std::to_string(L_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_beta_a_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_av_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_raw_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"gamma_z_alpha_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_z_alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_alpha_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_mean_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_sd_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_alpha_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_z_alpha_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_z_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pos_C\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"pos_E\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_holdout_2dim__) + "}},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Omega_beta_1dim__) + ",\"cols\":" + std::to_string(Omega_beta_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(covariance_beta_1dim__) + ",\"cols\":" + std::to_string(covariance_beta_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_holdout\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"qred_holdout\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"actual_holdout\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta_a_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((L_1dim__ * (L_1dim__ - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_beta_a_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_av_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_raw_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"gamma_z_alpha_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_z_alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"gamma_a_alpha_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_a_alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"parameters\"},{\"name\":\"beta_a_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_mean_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_sd_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_a_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_av\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_2dim__) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_alpha_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_z_alpha_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_z_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_videolevel_features) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pos_C\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"pos_E\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"beta_av_holdout\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(V_holdout) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_av_holdout_2dim__) + "}},\"block\":\"generated_quantities\"},{\"name\":\"Omega_beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Omega_beta_1dim__) + ",\"cols\":" + std::to_string(Omega_beta_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"covariance_beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(covariance_beta_1dim__) + ",\"cols\":" + std::to_string(covariance_beta_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_holdout\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"qred_holdout\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"},{\"name\":\"actual_holdout\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(V_holdout) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((beta_a_raw_1dim__ + (L_1dim__ * L_2dim__)) + sigma_beta_a_1dim__) +
        (V_train * beta_av_raw_2dim__)) + 1) + N_videolevel_features) + 1) +
    N_videolevel_features);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((beta_a_mean_1dim__ + beta_a_sd_1dim__) + beta_a_1dim__) +
        (V_train * beta_av_2dim__)) + 1) + N_videolevel_features) + 1) +
    N_videolevel_features);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((1 + 1) + (V_holdout * beta_av_holdout_2dim__)) +
        (Omega_beta_1dim__ * Omega_beta_2dim__)) +
       (covariance_beta_1dim__ * covariance_beta_2dim__)) + V_holdout) +
     V_holdout) + V_holdout);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((beta_a_raw_1dim__ + (L_1dim__ * L_2dim__)) + sigma_beta_a_1dim__) +
        (V_train * beta_av_raw_2dim__)) + 1) + N_videolevel_features) + 1) +
    N_videolevel_features);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((((beta_a_mean_1dim__ + beta_a_sd_1dim__) + beta_a_1dim__) +
        (V_train * beta_av_2dim__)) + 1) + N_videolevel_features) + 1) +
    N_videolevel_features);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((1 + 1) + (V_holdout * beta_av_holdout_2dim__)) +
        (Omega_beta_1dim__ * Omega_beta_2dim__)) +
       (covariance_beta_1dim__ * covariance_beta_2dim__)) + V_holdout) +
     V_holdout) + V_holdout);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 8> names__{"beta_a_raw", "L",
      "sigma_beta_a", "beta_av_raw", "gamma_z_alpha_sd", "gamma_z_alpha_raw",
      "gamma_a_alpha_sd", "gamma_a_alpha_raw"};
      const std::array<Eigen::Index, 8> constrain_param_sizes__{beta_a_raw_1dim__
       , (L_1dim__ * L_2dim__), sigma_beta_a_1dim__,
       (V_train * beta_av_raw_2dim__), 1, N_videolevel_features, 1,
       N_videolevel_features};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = mixture_pl_0x43a0y_z0xy_sep_modified_model_namespace::mixture_pl_0x43a0y_z0xy_sep_modified_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mixture_pl_0x43a0y_z0xy_sep_modified_model_namespace::profiles__;
}

#endif


